/**
 * Code generated by github.com/worldiety/macro. DO NOT EDIT.
 */
import type { EventType } from '@/shared/protocol/ora/eventType';
import type { RequestId } from '@/shared/protocol/ora/requestId';

/**
 * An Acknowledged event is the response to an [EventsAggregated] event if a [RequestId] had been set.
 * A transaction forms an envelope message which contains a bunch of the actual events, which shall be applied within a single event processing step at the receivers side in exactly the given order.
 * A receiver must ensure the sequential processing of the contained messages and must not apply them in different order, partially or in parallel. Nested transactions are invalid.
 *
 * It looks quite obfuscated, however this minified version is intentional, because it may succeed each transaction call.
 * A frontend may request acknowledges for each event, e.g. while typing in a text field, so this premature optimization is likely a win.
 *
 * The ack event is send as a response from the receiver of a transaction in which the optional _requestId_ property has been set by the sender.
 * It can be used to debounce UI elements but can also be omitted to improve latency or in situations where the sender is not interested if the event has been received.
 * It must not enveloped into a transaction.
 */
export interface Acknowledged {
	// Type
	type: 'A' /*EventType*/;
	// RequestId
	r /*RequestId*/ : RequestId;
}
