/**
 * Code generated by github.com/worldiety/macro. DO NOT EDIT.
 */
import type { Border } from '@/shared/protocol/ora/border';
import type { Color } from '@/shared/protocol/ora/color';
import type { Component } from '@/shared/protocol/ora/component';
import type { ComponentType } from '@/shared/protocol/ora/componentType';
import type { Font } from '@/shared/protocol/ora/font';
import type { Frame } from '@/shared/protocol/ora/frame';
import type { Padding } from '@/shared/protocol/ora/padding';
import type { Ptr } from '@/shared/protocol/ora/ptr';
import type { TextAlignment } from '@/shared/protocol/ora/textAlignment';

/**
 * A TextLayout places its content like a native Text would layout its words, using the same rules for word wrap
 * and alignments. This allows to style inline-components individually. SwiftUI can do this using + on
 * Text and Images. Jetpack has the concept of annotated strings.
 */
export interface TextLayout {
	// Type
	type: 'ts' /*ComponentType*/;
	// Children
	c /*omitempty*/? /*Children*/ : Component[];
	// Border
	b /*omitempty*/? /*Border*/ : Border;

	/**
	 * Frame is omitted if empty
	 */
	// Frame
	f /*omitempty*/? /*Frame*/ : Frame;

	/**
	 * BackgroundColor regular is always transparent
	 */
	// BackgroundColor
	bgc /*omitempty*/? /*BackgroundColor*/ : Color;
	// Padding
	p /*omitempty*/? /*Padding*/ : Padding;

	/**
	 * see also https://www.w3.org/WAI/tutorials/images/decision-tree/
	 */
	// AccessibilityLabel
	al /*omitempty*/? /*AccessibilityLabel*/ : string;
	// Invisible
	iv /*omitempty*/? /*Invisible*/ : boolean;
	// Font
	fn /*omitempty*/? /*Font*/ : Font;
	// Action
	t /*omitempty*/? /*Action*/ : Ptr;
	// TextAlignment
	a /*omitempty*/? /*TextAlignment*/ : TextAlignment;
}
