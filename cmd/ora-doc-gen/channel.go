package main

func aboutChannel(d *Doc) {
	d.Printf(`
## channel

A **channel** or **event stream** is bidirectional and has exactly 2 participants which are both receivers and senders of messages.
The nature is asynchronous, thus a sucessful write into a channel does neither imply that the messsage has been received nor processed.
The physical layer of a channel is not specified, so there may be different channel implementations, e.g. based on a WebSocket or using Server Side Events (SSE) or other simple (long) poll mechanics.

One communication participant is the backend and one is the frontend.
The frontend has no knowlege about any business domain.
Instead, it creates a user interface by interpreting a render tree which is generated by the backend and serialized into a message respective event.

At least, all messages must be supported to be serialized as JSON.
We considered more efficient serialisation formats, like protobuf, flatbuffers, cap'n proto etc. but we think the added complexity is not worth the advantages, especially in the current project status.
Before changing the serialization format, we recommend to use a channel with transparent compression.
Future versions may additionally negotiate other encodings.

## event

An **event** is basically a message from a channel, from a high level perspective.
However, events are aggregated into transactions.

## receiver

A **receiver** denotes the intended listener of a message, which is either the frontend or backend, whoever has not send the message.

`)
}
