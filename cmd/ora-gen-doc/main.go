package main

import (
	"flag"
	"fmt"
	"go.wdy.de/nago/presentation/ora"
	"log/slog"
	"os"
	"path/filepath"
	"reflect"
	"time"
)

func main() {
	generate()
}

func generate() {
	dir, _ := os.Getwd()
	dir = filepath.Join(dir, "web", "vuejs", "src", "shared", "protocol", "gen")
	outDir := flag.String("output-dir", dir, "the target directory to overwrite files into")
	flag.Parse()

	slog.Info("generating markdown in", slog.String("dir", *outDir))

	d := NewDoc()
	d.Printf("This documentation is auto-generated by ora-doc-gen. Do NOT edit.\n\n")
	d.Printf("Generated at %s.\n", time.Now().Format(time.DateTime))
	d.Printf(`

<style>
table th:first-of-type {
    width: 20%%;
}
table th:nth-of-type(2) {
    width: 30%%;
}
table th:nth-of-type(3) {
    width: 50%%;
}
table th:nth-of-type(4) {
    width: 30%%;
}
</style>

`)
	aboutChannel(d)
	d.Printf("## events\n\n")

	for _, event := range ora.Events {
		newEvent := reflect.New(event).Elem().Interface()
		d.Printf("### %s\n\n", nameOf(event.Name()))
		d.PrintSpec(newEvent)
		d.PrintJSON(newEvent)
	}

	d.Printf("## Components\n\n")
	for _, component := range ora.Components {
		newEvent := reflect.New(component).Elem().Interface()
		d.Printf("### %s\n\n", nameOf(component.Name()))
		d.PrintSpec(newEvent)
		d.PrintJSON(newEvent)
	}

	fmt.Println(d.out.String())

	if err := os.WriteFile(filepath.Join(*outDir, "README.md"), []byte(d.out.String()), os.ModePerm); err != nil {
		panic(err)
	}
}

var ptr ora.Ptr

func nextPtr() ora.Ptr {
	ptr++
	return ptr
}

func nextRequestId() ora.RequestId {
	ptr++
	return ora.RequestId(ptr)
}

func nextCaption() string {
	return fmt.Sprintf("Caption No. %d", nextPtr())
}

func nextSVGSrc() ora.SVG {
	return ora.SVG(fmt.Sprintf("<svg>my inline svg %d</svg>", nextPtr()))
}

func nextUUID() string {
	return "3d159507-35a7-422b-9a77-74546bc5fcbe"
}
