{"/blog/":{"data":{"":" Latest developer updates "},"title":"News"},"/changelog/":{"data":{"":" Latest published changes "},"title":"Changelog"},"/docs/":{"data":{"":"This doc improves from time to time."},"title":"Documentation"},"/docs/apis/":{"data":{"":"Probably the section where “modules” like usercircle, importer, store etc. is explained.\nTBD"},"title":"APIs"},"/docs/architecture/":{"data":{"":"Some interesting stuff about architecture, design patterns etc.\nTBD"},"title":"Architecture"},"/docs/components/":{"data":{"":"Components are configured using a fluent builder-style API.\nThey support method chaining for layout, style, and behavior customization.\nEach method returns a modified version of the component, allowing for chaining.\n⚠️ Be careful with the order as some return types may break the chain. "},"title":"Components"},"/docs/components/basic/":{"data":{"":"Basic components are the fundamental building blocks of the user interface. They are simple, reusable, and commonly used across many parts of the application.","examples#Examples":" Buttons Checkboxes Radio buttons Text fields Labels Avatars These components typically have minimal internal logic and are designed for composition into more complex structures.\n➡️ See also: Composite, Layout, Feedback \u0026 Overlays, Utility"},"title":"Basic"},"/docs/components/basic/button/":{"data":{"":"A basic clickable UI component used to trigger actions or events. There are three different kinds of Buttons:\nPrimaryButton, SecondaryButton \u0026 TertiaryButton.","constructors#Constructors":"PrimaryButton PrimaryButton uses an internal preset to represent a primary button. See also FilledButton for a custom-colored Button. This may behave slightly different (but more correctly), due to optimizations of the frontend renderer.\nPrimaryButton(func() { fmt.Println(\"Hello World\") }).Title(\"Hello World\") package main import ( \"fmt\" icons \"go.wdy.de/nago/presentation/icons/hero/solid\" \"go.wdy.de/nago/presentation/ui\" ) func main() { ui.PrimaryButton(func() { fmt.Println(\"Hello World\") }).Title(\"Hello World\").PreIcon(icons.SpeakerWave) } SecondaryButton SecondaryButton uses an internal preset to represent a secondary button. See also FilledButton for a custom-colored Button. This may behave slightly different (but more correctly), due to optimizations of the frontend renderer.\nSecondaryButton(func() { fmt.Println(\"Hello World\") }).Title(\"Hello World\") TertiaryButton TertiaryButton uses an internal preset to represent a tertiary button. See also FilledButton for a custom-colored Button. This may behave slightly different (but more correctly), due to optimizations of the frontend renderer.\nTertiaryButton(func() { fmt.Println(\"Hello World\") }).Title(\"Hello World\") ","methods#Methods":" Method Description AccessibilityLabel(label string) Enabled(b bool) Enabled has only an effect for StylePreset otherwise it is ignored. Font(font Font) Frame(frame Frame) ID(id string) PostIcon(svg core.SVG) PreIcon(svg core.SVG) Preset(preset StylePreset) Title(text string) Visible(b bool) ","related#Related":" Frame Button "},"title":"Button"},"/docs/components/basic/checkbox/":{"data":{"":"It does some things.","constructors#Constructors":"Checkbox Checkbox represents a user interface element which spans a visible area to click or tap from the user. Use it for controls, which do not cause an immediate effect. See also [Toggle].","methods#Methods":" Method Description Disabled(disabled bool) ID(id string) InputChecked(input *core.State[bool]) Visible(v bool) "},"title":"Checkbox"},"/docs/components/basic/filled_button/":{"data":{"":"It behaves like a normal button, but you can set a background color.","constructors#Constructors":"FilledButton ","methods#Methods":" Method Description Frame(frame Frame) PostIcon(svg core.SVG) PreIcon(svg core.SVG) TextColor(color Color) Title(text string) ","related#Related":" Frame "},"title":"Filled Button"},"/docs/components/basic/picker/":{"data":{"":"The picker component is classic dropdown menu.","constructors#Constructors":"Picker Picker takes the given slice and state to represent the selection. Internally, it uses deep equals, to determine the unique set of selected elements and coordinate that with the UI state.\npackage main import ( \"go.wdy.de/nago/presentation/core\" \"go.wdy.de/nago/presentation/ui/picker\" ) func main() { type Person struct { Name string Age int } persons := []Person{ { Name: \"John\", Age: 20, }, { Name: \"Jane\", Age: 30, }, } selected := core.AutoState[[]Person](nil) picker.Picker[Person](\"Ich bin ein picker\", persons, selected) } ","methods#Methods":" Method Description AccessibilityLabel(label string) Border(border ui.Border) DetailView(detailView core.View) DetailView is optional and placed between the picker section and the button footer. Dialog() Dialog returns the dialog view as if pressed on the actual button. DialogPresented() Disabled(disabled bool) ErrorText(text string) Frame(frame ui.Frame) ItemPickedRenderer(fn func([]T) core.View) ItemPickedRenderer can be customized to return a non-text view for the given T. This is shown within the selected window for the currently selected items. ItemRenderer(fn func(T) core.View) ItemRenderer can be customized to return a non-text view for the given T. This is shown within the picker popup. If fn is nil, the default fallback rendering will be applied. MultiSelect(mv bool) MultiSelect is by default false. Padding(padding ui.Padding) QuickFilterSupported(flag bool) QuickFilterSupported sets the quick-filter-support and if true and values contains more than 10 items, the quick filter is shown. Default is true. SelectAllSupported(flag bool) SelectAllSupported sets the select-all-support and if true and multiSelect is enabled, a checkbox to select all is shown. Default is true. SupportingText(text string) Title(title string) Visible(visible bool) WithDialogPresented(state *core.State[bool]) WithFrame(fn func(ui.Frame) ui.Frame) pickerTable() syncCheckboxStates(state *core.State[[]T]) syncCurrentSelectedState() ","related#Related":" Frame "},"title":"Picker"},"/docs/components/basic/radiobutton/":{"data":{"":"Kann coole Dinge.","constructors#Constructors":"RadioButton RadioButton represents a user interface element which spans a visible area to click or tap from the user. Use it for controls, which do not cause an immediate effect and only one element can be picked at a time. See also [Toggle], [Checkbox] and [Select].","methods#Methods":" Method Description Disabled(disabled bool) InputChecked(input *core.State[bool]) Visible(v bool) "},"title":"Radiobutton"},"/docs/components/basic/text/":{"data":{"":"This component displays a piece of text with rich styling and interaction options. It can be used for static labels, links, or interactive elements with click actions.","constructors#Constructors":"Link Link performs a best guess based on the given href. If the href starts with http or https the window will perform an Open call. Otherwise, a local forward navigation is applied.\nLink(nil, \"Nago Docs\", \"https://www.nago-docs.com\", \"_blank\") LinkWithAction LinkWithAction(\"Nago Docs\", func() { fmt.Printf(\"Nago is easy to use\") }) MailTo MailTo(nil, \"Worldiety\", \"info@worldiety.de\") Text package main import ( \"fmt\" \"go.wdy.de/nago/presentation/ui\" ) func main() { ui.Text(\"hello world\"). Action(func() { fmt.Print(\"Nago is easy to use\") }). Underline(true). Color(\"#eb4034\"). Border(ui.Border{}.Width(\"2px\").Color(\"#4287f5\")) } ","methods#Methods":" Method Description AccessibilityLabel(label string) AccessibilityLabel sets the label of the text. The content of the label is also displayed in the tooltip that appears when you hover over the Text. Action(f func()) Action executes the function when the component is clicked. BackgroundColor(backgroundColor Color) BackgroundColor sets the color of the background. Border(border Border) Border draws a Border around the component. It’s used to set the Border width, color and radius. Fore more information also have a look at the Border component. Color(color Color) Color sets the Color of the font. FocusedBorder(border Border) FocusedBorder sets the Border width, color and radius when the component is focused. Font(font Font) Font sets the size, style and width of the Text. For more information also have a look at Font. Frame(frame Frame) Frame sets the width, minWidth, maxWidth, height, minHeight and maxHeight. FullWidth() FullWidth sets the width to 100%. HoveredBorder(border Border) HoveredBorder sets the Border width, color and radius when component is hovered. LineBreak(lb bool) LineBreak de-/activates line breaking in between the Text. Padding(padding Padding) Padding sets a top, right, bottom and left spacing. PressedBorder(border Border) PressedBorder sets the Border width, color and radius when the component is clicked. TextAlignment(align TextAlignment) TextAlignment sets the position of the Text. For more information also have a look at TextAlignment. Underline(b bool) Underline underlines the Text. Visible(visible bool) Visible decides whether a text is shown. WithFrame(fn func(Frame) Frame) WithFrame sets width, minWidth, maxWidth, height, minHeight and maxHeight using a function. ","related#Related":" Frame Text "},"title":"Text"},"/docs/components/composite/":{"data":{"":"Composite components are made up of multiple basic elements and encapsulate more complex behavior or structure. They often represent self-contained UI units with specific functionality.","examples#Examples":" Date pickers and color pickers Multi-step forms Rich text editors Use these when simple elements aren’t enough, and more behavior or structure is required.\n➡️ See also: Basic, Layout, Feedback \u0026 Overlays, Utility"},"title":"Composite"},"/docs/components/composite/code_editor/":{"data":{"":"This component provides a text editor interface\noptimized for writing and displaying code. It supports syntax highlighting,\nconfigurable tab size, and optional read-only or disabled states.","constructors#Constructors":"CodeEditor ","methods#Methods":" Method Description Frame(frame Frame) FullWidth() InputValue(state *core.State[string]) Language(language string) Language gives a syntax highlighting hint. Defined are go, html, css, json, xml, markdown but there may be arbitrary support. ReadOnly(b bool) ","related#Related":" Frame Code Editor "},"title":"Code Editor"},"/docs/components/composite/palette_picker/":{"data":{"":"This component allows users to select a color\nfrom a predefined palette. It is typically used in design tools or\nconfiguration interfaces where color choices are limited to a fixed set.","constructors#Constructors":"PalettePicker package main import abc \"go.wdy.de/nago/presentation/ui/colorpicker\" func main() { abc.PalettePicker(\"Colorpicker\", abc.DefaultPalette) } package main import ( \"fmt\" abc \"go.wdy.de/nago/presentation/ui/colorpicker\" ) func main() { fmt.Println(\"klappt\") abc.PalettePicker(\"2. Example\", abc.DefaultPalette) } ","methods#Methods":" Method Description AccessibilityLabel(label string) Border(border ui.Border) Dialog(pickerPresented *core.State[bool]) Dialog returns the dialog view as if pressed on the actual button. Disabled(disabled bool) ErrorText(text string) Frame(frame ui.Frame) Padding(padding ui.Padding) State(state *core.State[ui.Color]) State attaches the given state to the interaction process of selecting a value. A nil state signals read-only. SupportingText(text string) Title(title string) Value(color ui.Color) Value sets the selected value. An empty Color selects none. Visible(visible bool) WithFrame(fn func(ui.Frame) ui.Frame) pickerTable() ","related#Related":" Palette Picker "},"title":"Palette Picker"},"/docs/components/feedback-and-overlay/":{"data":{"":"Feedback \u0026 Overlay components provide visual responses to user actions or display content in layers above the main interface. They help guide users, confirm actions, or present additional information.","examples#Examples":" Alerts Banners Toasts Modals Dialogs ➡️ See also: Basic, Composite, Layout, Utility"},"title":"Feedback \u0026 Overlays"},"/docs/components/feedback-and-overlay/banner/":{"data":{"":"This component displays a prominent message to the user,\ntypically used for notifications, warnings, or confirmations. It consists\nof a title and message, and can optionally be dismissible and styled\naccording to intent (e. g. , success, warning, error). It also supports a callback when the banner is closed.","constructors#Constructors":"Banner Banner(\"Nago ist great\", \"Give it a try.\") ","methods#Methods":" Method Description Closeable(presented *core.State[bool]) Closeable makes the banner dismissible by binding its visibility to the given state. Frame(frame ui.Frame) Frame sets a custom frame (layout constraints) for the banner. Intent(intent Intent) Intent sets the visual intent of the banner (e.g., success, warning, error). OnClosed(fn func()) OnClosed sets a callback function that is triggered when the banner is closed. ","related#Related":" Banner "},"title":"Banner"},"/docs/components/layout/":{"data":{"":"Layout components define the structure and positioning of UI elements. They help organize content spatially and ensure responsive and consistent design across different screen sizes.","examples#Examples":" VStack / HStack Box Grid ScrollView Frame Position Scaffold Layout defines the how of structure, not the what of content.\n➡️ See also: Basic, Composite, Feedback \u0026 Overlays, Utility"},"title":"Layout"},"/docs/components/layout/frame/":{"data":{"":"Frame defines the sizing constraints and fixed dimensions for a UI element. It allows you to specify minimum and maximum width/height, as well as fixed\ndimensions. Frames are used to control layout behavior and responsiveness. All fields are optional. If a field is zero, it will not constrain the layout.","methods#Methods":" Method Description FullHeight() FullHeight sets the frame’s height to 100% of the available space. FullWidth() FullWidth sets the frame’s width to 100% of the available space. IsZero() IsZero returns true if all fields of the Frame are unset (zero value). MatchScreen() MatchScreen sets the frame to match the full viewport height and width. This is useful for fullscreen layouts or sections that should fill the screen. Size(h Length, w Length) Size sets both Width and Height to the given values and returns the updated Frame. ","related#Related":" Frame "},"title":"Frame"},"/docs/components/layout/grid_cell/":{"data":{"":"","constructors#Constructors":"GridCell GridCell creates a cell based on the given body. Rows and Columns start at 1, not zero. Without any alignment rules, the cell will stretch its body automatically to the calculated cell dimensions. Otherwise, if a cell alignment is set, the size is wrap-content semantics and the background of the grid will be visible. Thus, the default specification of no-alignment is different here.","methods#Methods":" Method Description Alignment(a Alignment) BackgroundColor(color Color) ColEnd(colEnd int) ColEnd must be always at least +1 of ColStart, even if that column is beyond the defined amount of total columns. ColSpan(colSpan int) ColSpan behavior is unspecified and can sometime make your life easier, because you must not exactly know the layout. However, it may also behave unexpectedly, especially when overlapped. ColStart(colStart int) ColStart must start at 1. Padding(p Padding) RowEnd(rowEnd int) RowEnd must be always at least +1 of RowStart, even if that row is beyond the defined amount of total rows. RowSpan(rowSpan int) RowSpan behavior is unspecified and can sometime make your life easier, because you must not exactly know the layout. However, it may also behave unexpectedly, especially when overlapped. RowStart(rowStart int) RowStart must start at 1. render(ctx core.RenderContext) "},"title":"Grid Cell"},"/docs/components/layout/vstack/":{"data":{"":"VStack is a vertical layout container that arranges its child views in a column. It supports alignment, spacing, background styling, borders, and interaction states. The VStack is interactive if an action is defined and can respond to hover, press,\nand focus states with visual feedback.","constructors#Constructors":"VStack VStack is a container, in which the given children will be layout in a column according to the applied alignment rules. Note, that per definition the container clips its children. Thus, if working with shadows, you need to apply additional padding.","methods#Methods":" Method Description AccessibilityLabel(label string) Action(f func()) Alignment(alignment Alignment) Append(children ...) BackgroundColor(backgroundColor Color) Border(border Border) FocusedBackgroundColor(backgroundColor proto.Color) FocusedBorder(border Border) Font(font Font) Frame(f Frame) FullWidth() Gap(gap Length) HoveredBackgroundColor(backgroundColor Color) HoveredBorder(border Border) ID(id string) NoClip(b bool) Padding(padding Padding) Position(position Position) PressedBackgroundColor(backgroundColor Color) PressedBorder(border Border) StylePreset(preset StylePreset) TextColor(textColor Color) Visible(visible bool) WithFrame(fn func(Frame) Frame) ","related#Related":" Frame VStack "},"title":"VStack"},"/docs/components/utility/":{"data":{"":"Utility components provide supporting functionality, styling, or configuration for other components. They are often used to apply design tokens, manage behavior, or enhance developer experience.\nThis category also includes conditional rendering utilities that control the visibility and repetition of UI elements based on logic or data.","examples#Examples":" Style presets and color sets Keyboard helpers and redraw triggers Window title and document metadata Conditional rendering: ui.if, ui.ifelse, ui.foreach These are essential for maintaining consistency and control across your UI system.\n➡️ See also: Basic, Composite, Layout, Feedback \u0026 Overlays"},"title":"Utility"},"/docs/components/utility/colorset/":{"data":{"":"Colors defines a themes color set. See also https://wiki. worldiety. net/books/design-system-ora/page/farbsystem.","methods#Methods":" Method Description Default(scheme core.ColorScheme) Namespace() Valid() "},"title":"Colorset"},"/docs/components/utility/keyboard_options/":{"data":{"":"Keyboard Options defines configuration options for virtual keyboard behavior. It allows customization of capitalization, auto-correction, and keyboard type hints. These options are primarily used in text input components to enhance user experience.","constructors#Constructors":"KeyboardOptions KeyboardOptions() ","methods#Methods":" Method Description AutoCorrectEnabled(autoCorrectEnabled bool) AutoCorrectEnabled enables or disables auto-correction. Capitalization(capitalization bool) Capitalization enables or disables automatic capitalization. KeyboardType(keyboardType KeyboardType) KeyboardType is a hint to the frontend. Technically, it is impossible to actually guarantee anything, and you have always to considers bugs and hacks: - a malicious user may send you anything, which would otherwise not be possible (e.g. text instead of numbers) - Android IME hints or keyboard types are never guaranteed. A user may install third-party keyboards which just ignore anything - a user may inject anything using wrong autocompletion or the clipboard ","related#Related":" Keyboard Options "},"title":"Keyboard Options"},"/docs/components/utility/window_title/":{"data":{"":"This component sets the browser or application window title which is also displayed in the browser tab.","constructors#Constructors":"WindowTitle WindowTitle(\"Nago\") "},"title":"Window Title"},"/docs/examples/":{"data":{"":"","das-obligatorische-hello-world-beispiel#Das obligatorische \u003cem\u003ehello world\u003c/em\u003e Beispiel.":"Das obligatorische hello world Beispiel. Sämtliche Tutorialbeispiele befinden sich auch als ausführbare Packages im Nago-Projekt. Um ein Tutorial Paket auszuführen, reicht ein Aufruf wie go run go.wdy.de/nago/example/cmd/tutorial-helloworld@latest.\nDa es sich beim Nago-Projekt um ein firmeninternes Repository handelt, kann es nicht automatisch durch das Go-Modulsystem aufgelöst werden. Einmalig musst du also deine Konfiguration anpassen:\nDu musst deinen public ssh-key in deinem worldiety Gitlab Account hinzugefügt haben Konfiguriere die folgende git-replace Regel: git config --global url.\"ssh://git@gitlab.worldiety.net/\".insteadOf \"https://gitlab.worldiety.net/\" Nun muss das go buildsystem noch wissen, dass es sich um ein privates Repository handelt und damit die öffentliche notary sum database deaktiviert wird: # note the \\* escaping for zsh go env -w GOPRIVATE=go.wdy.de/\\*,gitlab.worldiety.net/\\* Vergiss das initale go mod tidy bei deinem eigenen Projekt nicht, damit sich dein lokaler Modulecache die Abhängigkeiten zieht. Für ein go run ist das aber nicht erforderlich. Somit sollten sich nun alle Beispiele bauen und ausführen lassen. Beim späteren Bauen in der CI/CD-Pipeline musst du diese Konfiguration in deiner .gitlab-ci.yaml entsprechend nachvollziehen. Alternativ kannst du sämtliche Abhängigkeiten auch mittels go mod vendor in deinem Projekt hinzufügen und kannst fortan offline reproduzierbare Builds erzeugen.\nEine kommentierte hello world Version\n// main denotes an executable go package. If you don't know, what that means, go through the Go Tour first. package main import ( \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" \"go.wdy.de/nago/presentation/proto\" \"go.wdy.de/nago/presentation/ui2\" \"go.wdy.de/nago/web/vuejs\" ) // the main function of the program, which is like the java public static void main. func main() { // we use the applications package to bootstrap our configuration application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.Component(\".\", func(wnd core.Window) core.View { return ui.VStack(ui.Text(\"hello world\")). Frame(proto.Frame{}.MatchScreen()) }) }). // don't forget to call the run method, which starts the entire thing and blocks until finished Run() } Minified hello world zum Copy-Pasten:\npackage main import ( \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.RootView(\".\", func(wnd core.Window) core.View { return ui.VStack(ui.Text(\"hello world\")). Frame(ui.Frame{}.MatchScreen()) }) }).Run() } "},"title":"Examples"},"/docs/examples/tutorial-01-helloworld/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License // main denotes an executable go package. If you don't know, what that means, go through the Go Tour first. package main import ( \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" . \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" ) // the main function of the program, which is like the java public static void main. func main() { // we use the applications package to bootstrap our configuration application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial_01\") cfg.Serve(vuejs.Dist()) cfg.RootView(\".\", func(wnd core.Window) core.View { return VStack(Text(\"hello world\")). Frame(Frame{}.MatchScreen()) }) }). // don't forget to call the run method, which starts the entire thing and blocks until finished Run() } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 01"},"/docs/examples/tutorial-01-helloworld/readme/":{"data":{"":"","das-obligatorische-hello-world-beispiel#Das obligatorische \u003cem\u003ehello world\u003c/em\u003e Beispiel.":"Das obligatorische hello world Beispiel. Sämtliche Tutorialbeispiele befinden sich auch als ausführbare Packages im Nago-Projekt. Um ein Tutorial Paket auszuführen, reicht ein Aufruf wie go run go.wdy.de/nago/example/cmd/tutorial-helloworld@latest.\nDa es sich beim Nago-Projekt um ein firmeninternes Repository handelt, kann es nicht automatisch durch das Go-Modulsystem aufgelöst werden. Einmalig musst du also deine Konfiguration anpassen:\nDu musst deinen public ssh-key in deinem worldiety Gitlab Account hinzugefügt haben Konfiguriere die folgende git-replace Regel: git config --global url.\"ssh://git@gitlab.worldiety.net/\".insteadOf \"https://gitlab.worldiety.net/\" Nun muss das go buildsystem noch wissen, dass es sich um ein privates Repository handelt und damit die öffentliche notary sum database deaktiviert wird: # note the \\* escaping for zsh go env -w GOPRIVATE=go.wdy.de/\\*,gitlab.worldiety.net/\\* Vergiss das initale go mod tidy bei deinem eigenen Projekt nicht, damit sich dein lokaler Modulecache die Abhängigkeiten zieht. Für ein go run ist das aber nicht erforderlich. Somit sollten sich nun alle Beispiele bauen und ausführen lassen. Beim späteren Bauen in der CI/CD-Pipeline musst du diese Konfiguration in deiner .gitlab-ci.yaml entsprechend nachvollziehen. Alternativ kannst du sämtliche Abhängigkeiten auch mittels go mod vendor in deinem Projekt hinzufügen und kannst fortan offline reproduzierbare Builds erzeugen.\nEine kommentierte hello world Version\n// main denotes an executable go package. If you don't know, what that means, go through the Go Tour first. package main import ( \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" \"go.wdy.de/nago/presentation/proto\" \"go.wdy.de/nago/presentation/ui2\" \"go.wdy.de/nago/web/vuejs\" ) // the main function of the program, which is like the java public static void main. func main() { // we use the applications package to bootstrap our configuration application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.Component(\".\", func(wnd core.Window) core.View { return ui.VStack(ui.Text(\"hello world\")). Frame(proto.Frame{}.MatchScreen()) }) }). // don't forget to call the run method, which starts the entire thing and blocks until finished Run() } Minified hello world zum Copy-Pasten:\npackage main import ( \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.RootView(\".\", func(wnd core.Window) core.View { return ui.VStack(ui.Text(\"hello world\")). Frame(ui.Frame{}.MatchScreen()) }) }).Run() } "},"title":"README"},"/docs/examples/tutorial-02-combining-views/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( _ \"embed\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" . \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" ) //go:embed hummel.jpg var hummelData application.StaticBytes //go:embed gras.jpg var grasData application.StaticBytes func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) hummelUri := cfg.Resource(hummelData) grasUri := cfg.Resource(grasData) cfg.RootView(\".\", func(wnd core.Window) core.View { return VStack( Image(). URI(grasUri). Frame(Frame{}.Size(\"\", L320)), CircleImage(hummelUri). AccessibilityLabel(\"Hummel an Lavendel\"). Padding(Padding{Top: L160.Negate()}), VStack( Text(\"Hummel\"). Font(Title), HStack( Text(\"WZO Terrasse\"), Spacer(), Text(\"Oldenburg\"), ).Font(Font{Size: L12}). Frame(Frame{}.FullWidth()), HLine(), Text(\"Es gibt auch\").Font(Title), Text(\"Andere Viecher\"), ).Alignment(Leading). Frame(Frame{Width: L320}), ). Frame(Frame{Height: ViewportHeight, Width: Full}) }) }).Run() } func CircleImage(data core.URI) DecoredView { return Image(). URI(data). Border(Border{}. Shadow(L8). Color(\"#ffffff\"). Width(L4). Circle()). Frame(Frame{}.Size(L320, L320)) } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 02"},"/docs/examples/tutorial-03-box/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( _ \"embed\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" . \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" ) //go:embed profile.jpg var profileData application.StaticBytes //go:embed gras.jpg var grasData application.StaticBytes func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) profileURI := cfg.Resource(profileData) grassURI := cfg.Resource(grasData) cfg.RootView(\".\", func(wnd core.Window) core.View { return VStack( Card( HStack( Avatar(profileURI), Details(\"Sir Gopher\", \"3 minutes ago\"), ), PostedImage(grassURI), ), ).Frame(Frame{}.MatchScreen()) }) }).Run() } func Avatar(data core.URI) core.View { return Box(BoxLayout{ Center: Image(). URI(data). Frame(Frame{}.Size(L120, L120)). Border(Border{}.Circle().Width(L4).Color(\"#ffffff\").Shadow(L4)), BottomTrailing: Box(BoxLayout{ Center: Text(\"42\"). Font(Font{Weight: BoldFontWeight}). Color(\"#2d6187\"), }). BackgroundColor(\"#52eb8f\"). Border(Border{}.Circle().Width(L4).Color(\"#ffffff\")). Frame(Frame{}.Size(L44, L44)), }). Frame(Frame{}.Size(L120, L120)) } func PostedImage(data core.URI) core.View { return Image(). URI(data). Frame(Frame{}.Size(Full, Auto)). Border(Border{}.Radius(L4).Elevate(2)) } func Details(headline, subheadline string) core.View { return VStack( Text(headline).Font(Title), Text(subheadline), ).Alignment(Leading). Padding(Padding{}.Horizontal(L20)) } func Card(views ...core.View) core.View { return VStack(views...). Gap(L12). Alignment(Leading). Border(Border{}.Radius(L4).Elevate(4)). Frame(Frame{}.Size(L320, Auto)). Padding(Padding{}.All(L8)) } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 03"},"/docs/examples/tutorial-04-container/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" . \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" \"slices\" ) const ( red = \"#ff0000\" green = \"#00ff00\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.RootView(\".\", func(wnd core.Window) core.View { return HStack( withTitle(\"box\", box()), withTitle(\"vstack\", vstack()), withTitle(\"hstack\", hstack()), ).Alignment(Top).Frame(Frame{}.FullWidth()) }) }).Run() } func box() core.View { return Box(BoxLayout{ Top: Text(\"top\").BackgroundColor(red), Center: Text(\"center\").BackgroundColor(red), Bottom: Text(\"bottom\").BackgroundColor(red), Leading: Text(\"leading\").BackgroundColor(red), Trailing: Text(\"trailing\").BackgroundColor(red), TopLeading: Text(\"top-leading\").BackgroundColor(red), TopTrailing: Text(\"top-trailing\").BackgroundColor(red), BottomLeading: Text(\"bottom-leading\").BackgroundColor(red), BottomTrailing: Text(\"bottom-trailing\").BackgroundColor(red), }).BackgroundColor(green).Frame(Frame{}.Size(L320, L320)) } func vstack() core.View { return VStack( slices.Collect[core.View](func(yield func(view core.View) bool) { for _, alignment := range Alignments() { yield(withTitle(fmt.Sprintf(\"vstack %s\", alignment.String()), VStack(someViews()...). Alignment(alignment). BackgroundColor(green). Frame(Frame{}.Size(L200, L200)), )) } })..., ) } func hstack() core.View { return VStack( slices.Collect[core.View](func(yield func(view core.View) bool) { for _, alignment := range Alignments() { yield(withTitle(fmt.Sprintf(\"hstack %s\", alignment.String()), HStack(someViews()...). Alignment(alignment). BackgroundColor(green). Frame(Frame{}.Size(L200, L200)), )) } })..., ) } func withTitle(title string, view core.View) core.View { return VStack( Text(title).Font(Title), view, ) } func someViews() []core.View { return []core.View{ Text(\"1\").BackgroundColor(red).Frame(Frame{}.Size(L16, L16)), Text(\"2\").BackgroundColor(red).Frame(Frame{}.Size(L20, L20)), Text(\"3\").BackgroundColor(red).Frame(Frame{}.Size(L40, L40)), } } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 04"},"/docs/examples/tutorial-05-gantt-grid/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" . \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" \"slices\" ) var months = []string{\"Januar\", \"Februar\", \"March\", \"April\", \"May\", \"June\", \"Juli\", \"August\", \"September\", \"October\", \"November\", \"Dezember\"} var names = []string{\"Beor der Alte\", \"Betsy Butterblume\", \"Bilbo Beutlin\", \"Adalbert Bolger\"} func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.RootView(\".\", func(wnd core.Window) core.View { return VStack(gantt()).Frame(Frame{}.FullWidth()).Padding(Padding{}.All(L44)) }) }).Run() } func gantt() core.View { return Grid( slices.Collect(func(yield func(cell TGridCell) bool) { for _, view := range ganttHeader() { yield(GridCell(view)) } for i, name := range names { for _, view := range ganttRow(i, name) { yield(view) } } yield(vacation()) })..., ). // be careful with cols and rows and be better as explicit as possible Widths(L160). Columns(13). RowGap(L8). Rows(len(names) + 1). Padding(Padding{Bottom: L8}). Border(Border{}.TopRadius(L16).Elevate(8)). Frame(Frame{}.Size(Full, Auto)) } func ganttHeader() []core.View { return slices.Collect(func(yield func(core.View) bool) { yield(headCell(\"Mitarbeiter\")) for _, month := range months { yield(headCell(month)) } }) } func ganttRow(idx int, name string) []TGridCell { return slices.Collect(func(yield func(cell TGridCell) bool) { yield(GridCell(Box(BoxLayout{Center: Text(name)}).BackgroundColor(\"#ff0000\")). ColStart(1). ColEnd(2), ) yield(GridCell(Box(BoxLayout{ Leading: Text(\"verplant\")}). BackgroundColor(\"#2ecaac\"). Padding(Padding{Left: L8}). Border(Border{}.Circle()), ). // be careful with cols and rows and be better as explicit as possible ColStart(idx*2 + 2). ColEnd(idx*2 + 5). RowStart(idx + 2). RowEnd(idx + 3)) }) } func vacation() TGridCell { return GridCell( Box(BoxLayout{Center: Text(\"Urlaub\").Font(Title).Color(\"#ffffff\")}). BackgroundColor(\"#ff6252aa\").Border(Border{}.Radius(L8).Shadow(L16)), ). RowStart(2). RowEnd(6). ColStart(5). ColEnd(9). Padding(Padding{}.All(L8)) } func headCell(text string) core.View { return VStack( Text(text).Color(\"#ffffff\")). BackgroundColor(\"#0a3444\").Frame(Frame{Height: L44}) } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 05"},"/docs/examples/tutorial-06-responsive/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( _ \"embed\" \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" . \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" ) //go:embed ora_image_black.svg var imgData application.StaticBytes func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) oraImgUri := cfg.Resource(imgData) cfg.RootView(\".\", func(wnd core.Window) core.View { return VStack( Text(fmt.Sprintf(\"size class %v\", wnd.Info().SizeClass)), ViewThatMatches(wnd, SizeClass(core.SizeClass2XL, func() core.View { return largeLayout(oraImgUri) }), SizeClass(core.SizeClassSmall, func() core.View { return smallLayout() }), SizeClass(core.SizeClassMedium, func() core.View { return mediumLayout(oraImgUri) }), ), ).BackgroundColor(\"#F5F5F5\"). Frame(Frame{}.FullWidth()).Padding(Padding{}.All(L44)) }) }).Run() } func largeLayout(img core.URI) core.View { return Grid( GridCell(heroCard(img)), GridCell(heroCard(img)), GridCell(heroCard(img)), ).Rows(1).ColGap(L16) } func mediumLayout(img core.URI) core.View { return Grid( GridCell(heroCard(img)), GridCell(heroCard(img)), GridCell(heroCard(img)), ).Rows(2).Gap(L16) } func smallLayout() core.View { return Grid( GridCell(heroCard(\"\")), GridCell(heroCard(\"\")), GridCell(heroCard(\"\")), ).Rows(3).Gap(L16) } func heroCard(img core.URI) DecoredView { return VStack( If(img != \"\", Image(). URI(img). Border(Border{}.Radius(L16)). Frame(Frame{}.Size(Full, \"278dp\"))), VStack( VStack( Text(\"Überschrift\").Font(Title), HLine(), ), Text(`Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.`), HStack( Text(\"Standard\"). Border(Border{}.Circle().Width(\"1dp\")). Padding(Padding{}.Vertical(L8).Horizontal(L16)), ). Alignment(Trailing). Frame(Frame{}.FullWidth()), ).Alignment(Leading). Gap(L16). Padding(Padding{}.All(L16)), ).Alignment(Top). BackgroundColor(\"#FAFAFA\"). Frame(Frame{}.Size(\"476dp\", Auto)). Border(Border{}.Radius(L16)) } ","image#Image":" ","info#Info":"More static content."},"title":"Tutorial 06"},"/docs/examples/tutorial-07-dialog/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" . \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" \"slices\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.RootView(\".\", func(wnd core.Window) core.View { isPresented := core.AutoState[bool](wnd) return VStack( Text(\"show dialog\").Action(func() { isPresented.Set(true) }), If(isPresented.Get(), Modal( Dialog(Text(\"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\")). Title(Text(\"Titel\")). Footer(PrimaryButton(func() { isPresented.Set(false) }).Title(\"Schließen\")), )), ).Append( slices.Collect(func(yield func(core.View) bool) { for i := range 50 { yield(Text(fmt.Sprintf(\"Line %d\", i))) } })..., ). Frame(Frame{}.MatchScreen()) }) }).Run() } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 07"},"/docs/examples/tutorial-08-colors/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" . \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" ) // MyCustomColors is a ColorSet which provides a namespace and the type safe color fields. type MyCustomColors struct { // Colors must be flat in this struct, public and of type color MySuperColor Color } func (m MyCustomColors) Default(scheme core.ColorScheme) core.ColorSet { if scheme == core.Light { return MyCustomColors{MySuperColor: \"#cd29ff\"} } return MyCustomColors{MySuperColor: \"#12ffc8\"} } func (m MyCustomColors) Namespace() core.NamespaceName { return \"myCustomColor\" } func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.ColorSet(core.Light, MyCustomColors{ MySuperColor: \"#ff0000\", }) cfg.RootView(\".\", func(wnd core.Window) core.View { colors := core.Colors[MyCustomColors](wnd) oraColors := core.Colors[Colors](wnd) return VStack( Text(\"hello world\").Color(oraColors.I0).BackgroundColor(oraColors.M0), FilledButton(colors.MySuperColor, nil).Title(\"my super button\"), ).Gap(L16).Frame(Frame{}.MatchScreen()) }) }).Run() } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 08"},"/docs/examples/tutorial-09-custom-button/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" . \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.RootView(\".\", func(wnd core.Window) core.View { return VStack( MyButton(\"First button\", func() { fmt.Println(\"clicked 1\") }), MyButton(\"Second button\", func() { fmt.Println(\"clicked 2\") }), ).Gap(L16).BackgroundColor(\"#4C4B5F\").Frame(Frame{}.MatchScreen()) }) }).Run() } func MyButton(caption string, action func()) core.View { return VStack(Text(caption).Color(\"#ffffff\")).Action(action). HoveredBackgroundColor(Color(\"#EF8A97\").WithTransparency(10)). PressedBackgroundColor(Color(\"#EF8A97\").WithTransparency(25)). PressedBorder(Border{}.Circle().Color(\"#ffffff\").Width(L2)). FocusedBorder(Border{}.Circle().Color(\"#ffffff\").Width(L2)). BackgroundColor(\"#EF8A97\"). Padding(Padding{}.Horizontal(L16).Vertical(L8)). Border(Border{}.Circle().Color(\"#00000000\").Width(L2)) // add invisible default border, to avoid dimension changes } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 09"},"/docs/examples/tutorial-10-icons/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"go.wdy.de/nago/application\" \"go.wdy.de/nago/pkg/xmaps\" \"go.wdy.de/nago/presentation/core\" flowbiteOutline \"go.wdy.de/nago/presentation/icons/flowbite/outline\" flowbiteSolid \"go.wdy.de/nago/presentation/icons/flowbite/solid\" heroOutline \"go.wdy.de/nago/presentation/icons/hero/outline\" heroSolid \"go.wdy.de/nago/presentation/icons/hero/solid\" materialFilled \"go.wdy.de/nago/presentation/icons/material/filled\" materialOutlined \"go.wdy.de/nago/presentation/icons/material/outlined\" . \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" \"slices\" ) type IconSet struct { Icons []Icon } type Icon struct { Name string UsesStrokeColor bool SVG core.SVG } func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.RootView(\".\", func(wnd core.Window) core.View { return VStack( Text(\"Hero Outline\"), Preview(makeIconSet(true, heroOutline.All)), Text(\"Hero Solid\"), Preview(makeIconSet(false, heroSolid.All)), Text(\"Flowbite Outline\"), Preview(makeIconSet(true, flowbiteOutline.All)), Text(\"Flowbite Solid\"), Preview(makeIconSet(false, flowbiteSolid.All)), Text(\"Material Filled\"), Preview(makeIconSet(false, materialFilled.All)), Text(\"Material Outlined\"), Preview(makeIconSet(false, materialOutlined.All)), ).Frame(Frame{}.FullWidth()) }) }).Run() } func Card(ico Icon) core.View { return VStack( Text(ico.Name), With(Image().Embed(ico.SVG), func(image TImage) TImage { if ico.UsesStrokeColor { return image.StrokeColor(\"#ff0000\") } return image.FillColor(\"#ff0000\") }).Padding(Padding{}.All(L4)). Border(Border{}.Circle().Color(\"#00ff00\").Width(L4)). Frame(Frame{}.Size(L44, L44)), ) } func Preview(set IconSet) core.View { return Grid(slices.Collect(func(yield func(cell TGridCell) bool) { for _, icon := range set.Icons { yield(GridCell(Card(icon))) } })...).Gap(L8).Columns(6) } func makeIconSet(stroke bool, icons map[string]core.SVG) IconSet { res := IconSet{} for _, key := range xmaps.SortedKeys(icons) { res.Icons = append(res.Icons, Icon{ Name: key, SVG: icons[key], UsesStrokeColor: stroke, }) } return res } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 10"},"/docs/examples/tutorial-11-buttons/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" icons \"go.wdy.de/nago/presentation/icons/hero/solid\" . \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.RootView(\".\", func(wnd core.Window) core.View { return HStack( defaultButtons(), VLine(), customButtons(wnd), ).Gap(L16).Alignment(Top).Frame(Frame{}.FullWidth()) }) }).Run() } func defaultButtons() core.View { return VStack( Text(\"Standard Buttons\").Font(Title), PrimaryButton(func() { fmt.Println(\"clicked the real primary\") }).Title(\"primary button\"), PrimaryButton(nil). Title(\"primary with pre icon\"). PreIcon(icons.SpeakerWave), PrimaryButton(nil). Title(\"primary with post icon\"). PostIcon(icons.SpeakerWave), PrimaryButton(nil). PreIcon(icons.SpeakerWave), SecondaryButton(nil).Title(\"secondary button\"), TertiaryButton(nil).Title(\"tertiary button\"), PasswordField(\"Test\", \"Test\"), PasswordField(\"Test\", \"Test\"), Toggle(false), ).Gap(L16). Padding(Padding{}.All(L16)) } func customButtons(wnd core.Window) core.View { colors := core.Colors[Colors](wnd) // grab our active ColorSet return VStack( Text(\"Custom Buttons\").Font(Title), // we cannot use the variable \"I0\" because the function needs to calculate active and hover derivates itself FilledButton(colors.I0, func() { fmt.Println(\"clicked a custom filled button\") }).Title(\"fake primary button\"), FilledButton(colors.I0, nil). PreIcon(icons.SpeakerWave). Title(\"fake primary button\"), FilledButton(colors.I0, nil). PostIcon(icons.SpeakerWave). Title(\"fake primary button\"), FilledButton(colors.I0, nil). PreIcon(icons.SpeakerWave), // hardcoded button, which does not react to color changes FilledButton(\"#EF8A97\", nil).TextColor(\"#ffffff\").Title(\"arbitrary color\"), ).Gap(L16). Padding(Padding{}.All(L16)) // graphical glitch: use some padding, custom buttons are 2dp larger due to emulated focus border, otherwise it gets clipped } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 11"},"/docs/examples/tutorial-12-textfield/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" . \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/presentation/ui/alert\" \"go.wdy.de/nago/web/vuejs\" \"strings\" \"time\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.RootView(\".\", func(wnd core.Window) core.View { firstname := core.AutoState[string](wnd) secret := core.AutoState[string](wnd) showAlert := core.AutoState[bool](wnd) myIntState := core.AutoState[int64](wnd) myFloatState := core.AutoState[float64](wnd) // add artificial latency time.Sleep(time.Millisecond * 500) return VStack( alert.Dialog(\"Achtung\", Text(fmt.Sprintf(\"Deine Eingabe: %v\\nsecret: %v\\n int-field: %v\\n float-field: %v\", firstname, secret, myIntState, myFloatState)), showAlert, alert.Ok()), TextField(\"hello world\", firstname.Get()).InputValue(firstname), // you can re-use the state, but be careful of the effects TextField(\"just numbers\", numsOf(firstname.Get())). InputValue(firstname). KeyboardType(KeyboardInteger). Style(TextFieldReduced), // learn task: take your time to understand what // the difference between value and input value is IntField(\"int-field\", 42, myIntState), FloatField(\"float-field\", 42.5, myFloatState), TextField(\"text area\", \"hello\\nworld\").Lines(3), PrimaryButton(func() { showAlert.Set(true) }).Title(\"Check\"), PasswordField(\"your secret\", secret.Get()).InputValue(secret), ).Gap(L16). Frame(Frame{}.MatchScreen()) }) }).Run() } func numsOf(s string) string { var sb strings.Builder for _, r := range s { if r \u003e= '0' \u0026\u0026 r \u003c= '9' { sb.WriteRune(r) } } return sb.String() } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 12"},"/docs/examples/tutorial-13-toggle/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" . \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/presentation/ui/alert\" \"go.wdy.de/nago/web/vuejs\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.RootView(\".\", func(wnd core.Window) core.View { checked := core.AutoState[bool](wnd) showAlert := core.AutoState[bool](wnd) return VStack( alert.Dialog(\"Achtung\", Text(fmt.Sprintf(\"Deine Eingabe: %v\", checked)), showAlert, alert.Ok()), Toggle(checked.Get()).InputChecked(checked), PrimaryButton(func() { showAlert.Set(true) }).Title(\"Check\"), ).Gap(L16). Frame(Frame{}.MatchScreen()) }) }).Run() } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 13"},"/docs/examples/tutorial-14-checkbox/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" . \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/presentation/ui/alert\" \"go.wdy.de/nago/web/vuejs\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.RootView(\".\", func(wnd core.Window) core.View { checked := core.AutoState[bool](wnd) showAlert := core.AutoState[bool](wnd) return VStack( alert.Dialog(\"Achtung\", Text(fmt.Sprintf(\"Deine Eingabe: %v\", checked)), showAlert, alert.Ok()), Checkbox(checked.Get()).InputChecked(checked), HStack( Checkbox(checked.Get()).InputChecked(checked), Text(\"check right\").Action(func() { checked.Set(!checked.Get()) }), ), HStack( Text(\"check left\").Action(func() { checked.Set(!checked.Get()) }), Checkbox(checked.Get()).InputChecked(checked), ).Gap(L16), PrimaryButton(func() { showAlert.Set(true) }).Title(\"Check\"), ).Gap(L16). Frame(Frame{}.MatchScreen()) }) }).Run() } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 14"},"/docs/examples/tutorial-15-radiobutton/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" . \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/presentation/ui/alert\" \"go.wdy.de/nago/web/vuejs\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.RootView(\".\", func(wnd core.Window) core.View { stateGroup := AutoRadioStateGroup(wnd, \"my-state-group\", 3) if stateGroup.SelectedIndex() == -1 { stateGroup.SetSelectedIndex(1) } showAlert := core.AutoState[bool](wnd) return VStack( alert.Dialog(\"Achtung\", Text(fmt.Sprintf(\"Deine Eingabe: %v\", stateGroup.SelectedIndex())), showAlert, alert.Ok()), VStack(Each2(stateGroup.All(), func(idx int, checked *core.State[bool]) core.View { return HStack( RadioButton(checked.Get()). InputChecked(checked), Text(fmt.Sprintf(\"Option %d\", idx)). Action(func() { stateGroup.SetSelectedIndex(idx) }), ) })...), PrimaryButton(func() { showAlert.Set(true) }).Title(\"Check\"), ).Gap(L16). Frame(Frame{}.MatchScreen()) }) }).Run() } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 15"},"/docs/examples/tutorial-16-datepicker/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/pkg/xtime\" \"go.wdy.de/nago/presentation/core\" . \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/presentation/ui/alert\" \"go.wdy.de/nago/web/vuejs\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.RootView(\".\", func(wnd core.Window) core.View { date := core.AutoState[xtime.Date](wnd).Init(func() xtime.Date { return xtime.Date{Day: 1, Month: 6, Year: 2024} }) start := core.AutoState[xtime.Date](wnd).Init(func() xtime.Date { return xtime.Date{Day: 2, Month: 7, Year: 2024} }) end := core.AutoState[xtime.Date](wnd).Init(func() xtime.Date { return xtime.Date{Day: 20, Month: 7, Year: 2024} }) showAlert := core.AutoState[bool](wnd) return VStack( alert.Dialog(\"Achtung\", Text(fmt.Sprintf(\"Deine Eingabe: %v, start=%v end=%v\", date, start, end)), showAlert, alert.Ok()), SingleDatePicker(\"Geburtstag\", date.Get(), date), RangeDatePicker(\"Urlaub\", start.Get(), start, end.Get(), end), PrimaryButton(func() { showAlert.Set(true) }).Title(\"Check\"), ).Gap(L16). Frame(Frame{}.MatchScreen()) }) }).Run() } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 16"},"/docs/examples/tutorial-17-scaffold/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( _ \"embed\" \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" icons2 \"go.wdy.de/nago/presentation/icons/flowbite/outline\" icons \"go.wdy.de/nago/presentation/icons/hero/solid\" . \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/presentation/ui/footer\" \"go.wdy.de/nago/web/vuejs\" ) //go:embed ORA_logo.svg var appIcon application.StaticBytes func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) // update the global app icon cfg.AppIcon(cfg.Resource(appIcon)) cfg.RootView(\".\", func(wnd core.Window) core.View { return Scaffold(ScaffoldAlignmentTop). Body(VStack( // this only causes the side effect of setting the current page title WindowTitle(\"Scaffold Example\"), Text(\"Page body\"), )). Footer(footer.Footer(). Logo(Image().Embed(appIcon)). Impress(\"https://www.worldiety.de/impressum\"). PrivacyPolicy(\"https://www.worldiety.de/datenschutz\"). GeneralTermsAndConditions(\"https://www.worldiety.de/loesungen/software-entwicklung\"). ProviderName(\"© worldiety GmbH\"), ). Logo(Image().Embed(appIcon).Frame(Frame{}.Size(\"auto\", L64))). Breakpoint(1000). Menu( ScaffoldMenuEntry{ Title: \"Without icon\", Action: func() { fmt.Println(\"clicked 'Without icon'\") }, }, ScaffoldMenuEntry{ Icon: Image().Embed(icons.User).Frame(Frame{}.Size(L20, L20)), Title: \"With icon\", MarkAsActiveAt: \".\", }, ScaffoldMenuEntry{ Icon: Image().Embed(icons.ChatBubbleLeft).Frame(Frame{}.Size(L20, L20)), Title: \"With icon and long title\", MarkAsActiveAt: \".\", }, ScaffoldMenuEntry{ Icon: Image().Embed(icons.QuestionMarkCircle).Frame(Frame{}.Size(L20, L20)), Title: \"With sub menu\", MarkAsActiveAt: \".\", Menu: []ScaffoldMenuEntry{ { Title: \"sub a\", }, { Title: \"sub b\", }, }, }, ScaffoldMenuEntry{ Icon: Image().Embed(icons.Window).Frame(Frame{}.Size(L20, L20)), IconActive: Image().Embed(icons2.Grid).Frame(Frame{}.Size(L20, L20)), Title: \"With active icon\", MarkAsActiveAt: \".\", }, ForwardScaffoldMenuEntry(wnd, icons.User, \"Forward entry\", \"/\"), ) }) }).Run() } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 17"},"/docs/examples/tutorial-18-table/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" . \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.RootView(\".\", func(wnd core.Window) core.View { return VStack( Table( TableColumn(Text(\"col 1\")). Width(L20), TableColumn(Text(\"col 2\")). Action(func() { fmt.Println(\"clicked header cell 2\") }). HoveredBackgroundColor(\"I0\"), TableColumn(Text(\"col 3\")), ).Rows( TableRow( TableCell(Text(\"row 1 col 1\")). Action(func() { fmt.Println(\"clicked cell 1/1\") }). HoveredBackgroundColor(\"I0\"), TableCell(Text(\"row 1 col 2\")).BackgroundColor(\"I0\"), TableCell(Text(\"row 1 col 3\")), ).Action(func() { fmt.Println(\"clicked row 1\") }), TableRow( TableCell(Text(\"row 2 col 1\")), TableCell(Text(\"row 2 col 2\")), TableCell(Text(\"row 2 col 3\")), ). Height(L80). BackgroundColor(\"M2\"). HoveredBackgroundColor(\"I0\"), TableRow( TableCell(Text(\"row 3 col 1\")), TableCell(Text(\"row 3 col 2+3\").Color(\"#ffffff\")). BackgroundColor(\"A0\"). Alignment(Center). ColSpan(2), ), TableRow( TableCell(Text(\"row 4+5 col 1\")). RowSpan(2). Border(Border{}. Color(\"M0\"). Width(L1)), TableCell(Text(\"row 4 col 2\")), TableCell(Text(\"row 4 col 3\")), ), TableRow( TableCell(Text(\"row 5 col 2\")), TableCell(Text(\"row 5 col 3\")), ), ).BackgroundColor(\"#ffffff\"). CellPadding(Padding{}.Horizontal(L24).Vertical(L16)). Frame(Frame{Width: L480}). RowDividerColor(\"M5\"). Border(Border{}.Radius(L20)), Text(\"cell alignments\"), Table().Rows( TableRow( TableCell(Text(\"top-leading\")). Alignment(TopLeading), TableCell(Text(\"top\")). Alignment(Top), TableCell(Text(\"top-trailing\")). Alignment(TopTrailing), ).Height(L80), TableRow( TableCell(Text(\"leading\")). Alignment(Leading), TableCell(Text(\"center\")). Alignment(Center), TableCell(Text(\"trailing\")). Alignment(Trailing), ).Height(L80), TableRow( TableCell(Text(\"bottom-leading\")). Alignment(BottomLeading), TableCell(Text(\"bottom\")). Alignment(Bottom), TableCell(Text(\"Bottom-trailing\")). Alignment(BottomTrailing), ).Height(L80), ).Frame(Frame{Width: L480}). RowDividerColor(\"#000000\"). BackgroundColor(\"I0\"), ).BackgroundColor(\"M3\"). Frame(Frame{}.MatchScreen()) }) }).Run() } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 18"},"/docs/examples/tutorial-19-download-file/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" . \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/presentation/ui/tracking\" \"go.wdy.de/nago/web/vuejs\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.RootView(\".\", func(wnd core.Window) core.View { return VStack( tracking.SupportRequestDialog(wnd), PrimaryButton(func() { // CAUTION: this must always be within an action, do not put this into the render tree wnd.ExportFiles(core.ExportFileBytes(\"test.txt\", []byte(\"hello world\"))) // this is just for illustration var err error err = fmt.Errorf(\"this is an unhandled infrastructure test error: %w\", err) if err != nil { tracking.RequestSupport(wnd, fmt.Errorf(\"cannot send files by doing this use case: %w\", err)) } }).Title(\"Download Single File\"), PrimaryButton(func() { wnd.ExportFiles(core.ExportFilesOptions{ Files: []core.File{ core.MemFile{Filename: \"file1.txt\", Bytes: []byte(\"hello world in file 1\")}, core.MemFile{Filename: \"file2.txt\", Bytes: []byte(\"hello world in file 2\")}, }, }) }).Title(\"Download Multiple\"), ).Gap(L44).Frame(Frame{}.MatchScreen()) }) }).Run() } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 19"},"/docs/examples/tutorial-19-download-file/readme/":{"data":{"download-bzw-das-senden-von-dateien#Download bzw. das Senden von Dateien":"Download bzw. das Senden von DateienDas Backend kann eine oder mehrere Dateien gleichzeitig an eine Frontend-Implementierung senden. Abhängig von der konkreten Plattform werden die Dateien an das System zur weiteren Verwendung durch den Nutzer weitergereicht. In einer Webbrowser-Umgebung wird immer genau ein Datei-Download ausgelöst. Wurden mehrere Dateien gesendet, werden diese vorher in einer Zip-Datei zusammengefasst und als files.zip zum Download angeboten. Auf anderen Plattformen werden in Abhängigkeit der automatisch ermittelten Mimetypes Anwendungen zur Weiterverarbeitung angeboten, z.B. mittels dem ACTION_SEND_MULTIPLE Intent unter Android.\nDie zum Download angebotenen Dateien sind nur temporär mit einem geheimen Token verfügbar. Dazu werden die Dateien aus dem fs.FS kopiert und an den Lebenszyklus eines Scopes gebunden, d.h. wird der Scope zerstört, wird auch die Datei gelöscht. Wurde ein Download gestartet und der Scope währenddessen zerstört, kann der laufende Download noch erfolgreich beendet werden."},"title":"README"},"/docs/examples/tutorial-20-upload-file/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" . \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/presentation/ui/alert\" \"go.wdy.de/nago/web/vuejs\" \"io\" \"time\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.RootView(\".\", func(wnd core.Window) core.View { return VStack( alert.BannerMessages(wnd), PrimaryButton(func() { wnd.ImportFiles(core.ImportFilesOptions{ Multiple: true, OnCompletion: func(files []core.File) { for _, file := range files { r, err := file.Open() if err != nil { alert.ShowBannerError(wnd, err) return } defer r.Close() time.Sleep(time.Second) if _, err := io.Copy(io.Discard, r); err != nil { alert.ShowBannerError(wnd, err) return } fmt.Println(file.Name()) } alert.ShowBannerMessage(wnd, alert.Message{ Title: \"super\", Message: \"das hat vll. geklappt\", Intent: alert.IntentOk, }) }, }) }).Title(\"Select Files\"), ).Frame(Frame{}.MatchScreen()) }) }).Run() } ","info#Info":"More static content."},"title":"Tutorial 20"},"/docs/examples/tutorial-21-crud/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/pkg/data\" \"go.wdy.de/nago/pkg/std\" \"go.wdy.de/nago/pkg/xtime\" \"go.wdy.de/nago/presentation/core\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/presentation/ui/crud\" \"go.wdy.de/nago/web/vuejs\" \"log\" \"log/slog\" \"net/http\" \"time\" ) import _ \"net/http/pprof\" type PID string type Score int type Grade float64 type Color string type Birthday xtime.Date type Vacation struct { Start xtime.Date End xtime.Date } type Person struct { ID PID Title string Firstname string Lastname string Friends []PID // this is like foreign keys, however they become stale and are not automatically updated BestFriend std.Option[PID] // this the same as above, but the one-to-one case Score Score Grade Grade Proofed bool FavoriteColor std.Option[Color] FavoriteColor2 std.Option[ui.Color] Colors []Color Birthday Birthday Vacation Vacation WorkDuration time.Duration } func (p Person) Identity() PID { return p.ID } type Persons data.Repository[Person, PID] func main() { go func() { log.Println(http.ListenAndServe(\"localhost:6060\", nil)) }() application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) persons := application.SloppyRepository[Person, PID](cfg) persons.SaveAll(func(yield func(Person) bool) { yield(Person{ ID: \"1\", Firstname: \"bilbo\", Lastname: \"beutlin\", Score: 1, }) yield(Person{ ID: \"2\", Firstname: \"Frodo\", Lastname: \"Beutlin\", BestFriend: std.Some[PID](\"1\"), Score: 2, }) }) cfg.RootView(\".\", func(wnd core.Window) core.View { bnd := crud.NewBinding[Person](wnd) bnd.Add( crud.Text(crud.TextOptions{Label: \"Vorname\"}, crud.Ptr(func(entity *Person) *string { return \u0026entity.Firstname })).WithValidation(func(person Person) (errorText string, infrastructureError error) { if person.Firstname != \"Torben\" { return \"Du bist nicht Torben\", nil } return \"\", nil }).WithSupportingText(\"Gib Torben ein\"), crud.Text(crud.TextOptions{Label: \"Nachname\"}, crud.Ptr(func(entity *Person) *string { return \u0026entity.Lastname })), crud.Int(crud.IntOptions{Label: \"Score\"}, crud.Ptr(func(model *Person) *Score { return \u0026model.Score })).WithValidation(func(person Person) (errorText string, infrastructureError error) { if person.Score != 42 { return \"muss 42 sein\", nil } return \"\", nil }), crud.Float(crud.FloatOptions{Label: \"Grade\"}, crud.Ptr(func(model *Person) *Grade { return \u0026model.Grade })), crud.Bool(crud.BoolOptions{Label: \"Proofed\"}, crud.Ptr(func(model *Person) *bool { return \u0026model.Proofed })).WithSupportingText(\"Check me if this is ok\"), crud.BoolToggle(crud.BoolOptions{Label: \"Proofed2\"}, crud.Ptr(func(model *Person) *bool { return \u0026model.Proofed })).WithSupportingText(\"don't bind same fields into the same form\"), crud.PickMultiple(crud.PickMultipleOptions[Color]{Label: \"Colors\", Values: []Color{\"red\", \"green\", \"blue\"}}, crud.Ptr(func(model *Person) *[]Color { return \u0026model.Colors })), crud.PickOne(crud.PickOneOptions[Color]{Label: \"Color\", Values: []Color{\"red\", \"green\", \"blue\"}}, crud.Ptr(func(model *Person) *std.Option[Color] { return \u0026model.FavoriteColor })), crud.OneToMany(crud.OneToManyOptions[Person, PID]{ Label: \"Friendos\", ForeignEntities: persons.All(), ForeignPickerRenderer: func(t Person) core.View { return ui.Text(fmt.Sprintf(\"%s %s\", t.Firstname, t.Lastname)) }, }, crud.Ptr(func(model *Person) *[]PID { return \u0026model.Friends })), crud.OneToOne(crud.OneToOneOptions[Person, PID]{ Label: \"Best Friend\", ForeignEntities: persons.All(), ForeignPickerRenderer: func(t Person) core.View { return ui.Text(fmt.Sprintf(\"%s %s\", t.Firstname, t.Lastname)) }, }, crud.PropertyFuncs[Person, std.Option[PID]](func(p *Person) std.Option[PID] { return p.BestFriend }, func(dst *Person, v std.Option[PID]) { dst.BestFriend = v })), crud.Date(crud.DateOptions{Label: \"Geburtstag\"}, crud.Ptr(func(model *Person) *Birthday { return \u0026model.Birthday })), crud.DateRange(crud.DateRangeOptions{Label: \"Urlaub\"}, crud.Ptr(func(model *Person) *xtime.Date { return \u0026model.Vacation.Start }), crud.Ptr(func(model *Person) *xtime.Date { return \u0026model.Vacation.End })), crud.Time(crud.TimeOptions{Label: \"Arbeitszeit\", ShowHours: true, ShowSeconds: true}, crud.Ptr(func(model *Person) *time.Duration { return \u0026model.WorkDuration })), crud.PickOneColor(crud.PickOneColorOptions{Label: \"Lieblingsfarbe 2\"}, crud.Ptr(func(model *Person) *std.Option[ui.Color] { return \u0026model.FavoriteColor2 })), crud.AggregateActions(\"Optionen\", crud.Optional[Person](crud.ButtonDelete[Person](wnd, func(p Person) error { slog.Info(\"delete person\", \"id\", p.ID) return nil }), func(person Person) bool { return person.ID != \"1\" }), crud.ButtonEdit[Person](bnd, func(p Person) (string, error) { slog.Info(\"update person\", \"id\", p.ID, \"person\", p) return \"\", persons.Save(p) }), ), ) return ui.VStack( crud.View[Person, PID]( crud.Options[Person, PID](bnd). Actions( crud.ButtonCreate[Person](bnd, Person{ID: \"do not randomize here\"}, func(person Person) (errorText string, infrastructureError error) { if !bnd.Validates(person) { return \"irgendein validation fehler, gugg hin\", nil } if person.Firstname == \"\" { return \"Vorname darf nicht leer sein\", nil } person.ID = data.RandIdent[PID]() // create a unique ID here return \"\", persons.Save(person) }), ). FindAll(persons.All()). Title(\"Personen\"), ), ).Padding(ui.Padding{}.All(ui.L16)).Frame(ui.Frame{}.FullWidth()) }) }).Run() } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 21"},"/docs/examples/tutorial-22-custom-handler/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( _ \"embed\" \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" \"log/slog\" \"net/http\" \"strings\" \"sync/atomic\" ) //go:embed animated-green-astronaut-helmet.svg var mySvg string func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) var invocationCount int64 // define a raw custom api handler uri := \"/api/v1/astronaut.svg\" cfg.HandleFunc(uri, func(w http.ResponseWriter, r *http.Request) { // on every reload, we modify our SVG image // CAUTION: be thread safe here count := atomic.AddInt64(\u0026invocationCount, 1) newSvg := strings.ReplaceAll(mySvg, \"$TEXT\", fmt.Sprintf(\"called %dx\", count)) w.Header().Set(\"Content-Type\", \"image/svg+xml\") if _, err := w.Write([]byte(newSvg)); err != nil { slog.Error(\"failed to write svg\", \"err\", err) } }) // press reload in your browser and watch how the image is loaded cfg.RootView(\".\", func(wnd core.Window) core.View { // use a little trick to trigger a reload in the native image view by changing the uri a bit return ui.Image().URI(core.URI(fmt.Sprintf(\"%s?version=%d\", uri, atomic.LoadInt64(\u0026invocationCount)))) }) }).Run() } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 22"},"/docs/examples/tutorial-23-appear-disappear/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"context\" _ \"embed\" \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" \"log/slog\" \"time\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.RootView(\".\", func(wnd core.Window) core.View { seconds := core.AutoState[int](wnd) core.OnAppear(wnd, \"my-time\", func(ctx context.Context) { slog.Info(\"launched\") for { if ctx.Err() != nil { slog.Info(\"my-timer has exited\") break // exit } time.Sleep(time.Second) // states are thread safe for setting and getting and // will trigger a time-sliced re-render automatically seconds.Set(seconds.Get() + 1) slog.Info(\"my seconds\", slog.Int(\"secs\", seconds.Get())) } slog.Info(\"exit\") }) customState := fmt.Sprintf(\"state-%v\", seconds) core.OnDisappear(wnd, customState, func(ctx context.Context) { slog.Info(\"disappeared\", \"old\", customState, \"active\", seconds) }) return ui.Text(fmt.Sprintf(\"seconds: %v\", seconds)) }) }).Run() } ","info#Info":"More static content."},"title":"Tutorial 23"},"/docs/examples/tutorial-24-redraw/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( _ \"embed\" \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" \"sync/atomic\" \"time\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) var redrawCounter atomic.Uint64 cfg.RootView(\".\", func(wnd core.Window) core.View { // this shows how to redraw views with a fixed rate, without using states to signal view invalidation redrawCounter.Add(1) return ui.RedrawAtFixedRate(wnd, time.Second, ui.Text(fmt.Sprintf(\"redraw: %v\", redrawCounter.Load()))) }) }).Run() } ","info#Info":"More static content."},"title":"Tutorial 24"},"/docs/examples/tutorial-25-blobstore/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"bytes\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/pkg/blob\" \"go.wdy.de/nago/pkg/std\" \"go.wdy.de/nago/presentation/core\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) // EntityStore is only for small files upto a few kilobytes. // This store saves everything within a single file using etcd bbolt fork. // Transactions are supported. // // In this example, the database file is ~/.de.worldiety.tutorial/bbolt/bolt.db dbstore := std.Must(cfg.EntityStore(\"small-blobs\")) // quickly write some bytes using a transaction with a single write. if _, err := blob.Write(dbstore, \"my key\", bytes.NewBufferString(\"I'm a fine blob\")); err != nil { panic(err) } // read them out var buf1 bytes.Buffer if ok, err := blob.Read(dbstore, \"my key\", \u0026buf1); err != nil || !ok { panic(err) } // FileStore is for large blobs, from hundreds of kilobytes to gigabytes. // It stores each blobs as a single file directly in the local filesystem. // There is no transaction support at all, however some tricks like atomic rename are used to // lower the risk of damaged files. // // In this example, the files land in ~/.de.worldiety.tutorial/files/my-large-blobs fstore := std.Must(cfg.FileStore(\"my-large-blobs\")) // quickly write some bytes if _, err := blob.Write(fstore, \"my key\", bytes.NewBufferString(\"I'm a good blob\")); err != nil { panic(err) } // read them out var buf2 bytes.Buffer if ok, err := blob.Read(fstore, \"my key\", \u0026buf2); err != nil || !ok { panic(err) } cfg.RootView(\".\", func(wnd core.Window) core.View { return ui.Text(buf1.String() + \" \u0026 \" + buf2.String()) }) }).Run() } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 25"},"/docs/examples/tutorial-25-blobstore/readme/":{"data":{"blobstores-for-small-and-large-byte-streams#Blobstores for small and large byte streams":"Blobstores for small and large byte streamsStandardmäßig bietet das Framework nur die BlobStore API an. Obwohl grundsätzlich der Zugriff auf das Dateisystem nicht eingeschränkt wird, solltest du das Dateisystem wenn möglich nie direkt benutzen. Verwende stattdessen die BlobStore-API direkt oder mit einem der vielen Helfer-Funktionen und Typen.\nDurch die Abstraktion kannst du später die Implementierung einfach austauschen und somit sehr einfach die Eigenschaften Skalierbarkeit und Integrität beeinflussen. Derzeit gibt es eine BBolt-, eine Dateisystem- und eine In-Memory-Implementierung. Geplant sind zudem noch Implementierung für das worldiety S3- sowie das worldiety Cockroach-Cluster.\nUm das Prototyping zu erleichtern und strukturierte Daten zu verarbeiten, gibt es noch eine https://gitlab.worldiety.net/group/ora/nago/-/tree/main/pkg/data/json, die aber in einem anderen Tutorial vorgestellt wird.\npackage main import ( \"bytes\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/pkg/blob\" \"go.wdy.de/nago/presentation/core\" \"go.wdy.de/nago/presentation/uilegacy\" \"go.wdy.de/nago/web/vuejs\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) // BlobStore is only for small files upto a few kilobytes. // This store saves everything within a single file using etcd bbolt fork. // Transactions are supported. // // In this example, the database file is ~/.de.worldiety.tutorial/bbolt/bolt.db dbstore := cfg.BlobStore(\"small-blobs\") // quickly write some bytes using a transaction with a single write. if err := blob.Write(dbstore, \"my key\", bytes.NewBufferString(\"I'm a fine blob\")); err != nil { panic(err) } // read them out var buf1 bytes.Buffer if err := blob.Read(dbstore, \"my key\", \u0026buf1); err != nil { panic(err) } // FileStore is for large blobs, from hundreds of kilobytes to gigabytes. // It stores each blobs as a single file directly in the local filesystem. // There is no transaction support at all, however some tricks like atomic rename are used to // lower the risk of damaged files. // // In this example, the files land in ~/.de.worldiety.tutorial/files/my-large-blobs fstore := cfg.FileStore(\"my-large-blobs\") // quickly write some bytes if err := blob.Write(fstore, \"my key\", bytes.NewBufferString(\"I'm a good blob\")); err != nil { panic(err) } // read them out var buf2 bytes.Buffer if err := blob.Read(fstore, \"my key\", \u0026buf2); err != nil { panic(err) } cfg.Component(\".\", func(wnd core.Window) core.Component { return ui.MakeText(buf1.String() + \" \u0026 \" + buf2.String()) }) }).Run() } "},"title":"README"},"/docs/examples/tutorial-26-buildin-iam/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License // #[go.permission.generateTable] package main import ( \"fmt\" \"github.com/worldiety/option\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/application/consent\" \"go.wdy.de/nago/application/permission\" \"go.wdy.de/nago/application/settings\" \"go.wdy.de/nago/application/user\" cfgusercircle \"go.wdy.de/nago/application/usercircle/cfg\" \"go.wdy.de/nago/auth\" \"go.wdy.de/nago/pkg/std\" \"go.wdy.de/nago/pkg/xreflect\" \"go.wdy.de/nago/presentation/core\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" \"time\" ) var myPermission = permission.Declare[SayHello](\"de.worldiety.tutorial.say_hello\", \"Jeden Grüßen\", \"Diese Erlaubnis muss dem Nutzer zugewiesen werden.\") // SayHello greets everyone who has been authenticated. type SayHello func(auth auth.Subject) string func NewSayHello() SayHello { return func(auth auth.Subject) string { if err := auth.Audit(myPermission); err != nil { return fmt.Sprintf(\"invalid: %v\", err) } return \"hello \" + auth.Name() } } func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.SetName(\"Tutorial\") std.Must(cfg.Authentication()) cfg.SetDecorator(cfg.NewScaffold().Decorator()) option.MustZero(cfg.StandardSystems()) option.Must(cfgusercircle.Enable(cfg)) std.Must(std.Must(cfg.UserManagement()).UseCases.EnableBootstrapAdmin(time.Now().Add(time.Hour), \"%6UbRsCuM8N$auy\")) configureGDPRConsents(cfg) sayHello := NewSayHello() // remember to update your user.Settings to use the matching regex like ^(Kaufmann|Informatiker)$ xreflect.SetFieldTagFor[user.Settings](\"ProfessionalGroup\", \"supportingText\", \"Die Berufsgruppe muss Kaufmann oder Informatiker sein.\") xreflect.SetFieldTagFor[user.Settings](\"MobilePhone\", \"supportingText\", \"Wir benötigen die Telefonnummer, um Ihnen Buchungsbestätigungen zu schicken.\") cfg.RootViewWithDecoration(\".\", func(wnd core.Window) core.View { return ui.VStack( //uiuser.PasswordStrengthView(wnd, user.PasswordStrengthIndicator{}), ui.Text(fmt.Sprintf(\"%s\", sayHello(wnd.Subject()))), ).Gap(ui.L16).Frame(ui.Frame{}.MatchScreen()) }) }).Run() } func configureGDPRConsents(cfg *application.Configurator) { usrSettings := settings.ReadGlobal[user.Settings](std.Must(cfg.SettingsManagement()).UseCases.LoadGlobal) // do not append, just clear it usrSettings.Consents = []user.ConsentOption{ { ID: consent.DataProtectionProvision, Register: user.ConsentText{Label: \"Ja, ich habe die [Datenschutzbestimmungen](/page/datenschutz) gelesen und akzeptiert.\"}, Required: true, }, { ID: consent.Newsletter, Register: user.ConsentText{ Label: \"Ja, ich melde mich zum Newsletter an. Eine Abbestellung ist jederzeit möglich.\", SupportingText: \"Ein Widerspruch ist jederzeit in den Einstellungen Ihres Benutzerkontos/über Abmeldelink in den E-Mails möglich, ohne dass weitere (Übermittlungs-)Kosten als die nach den Basistarifen entstehen.\", }, Profile: user.ConsentText{ Label: \"Newsletter\", SupportingText: \"Regelmäßig Email Updates erhalten\", }, }, { ID: consent.GeneralTermsAndConditions, Register: user.ConsentText{Label: \"Ja, ich habe die [Geschäftsbedingungen](/page/agb) gelesen und akzeptiert.\"}, Required: true, }, { ID: consent.TermsOfUse, Register: user.ConsentText{ Label: \"Ja, ich habe die [Nutzungsbedingungen](/page/nutzungsbedingungen) gelesen und akzeptiert.\", }, Required: true, }, { ID: consent.MinAge, Register: user.ConsentText{ Label: \"Ja, ich bestätige, dass ich mindestens 16 Jahre alt bin.\", }, Required: true, }, { ID: consent.SMS, Register: user.ConsentText{ Label: \"Ja, ich melde mich zum SMS Versand an, um kurzfristige Benachrichtigungen zu erhalten. Eine Abbestellung ist jederzeit möglich.\", SupportingText: \"Ein Widerspruch ist jederzeit in den Einstellungen Ihres Benutzerkontos möglich.\", }, Profile: user.ConsentText{ Label: \"SMS Versand\", SupportingText: \"kurzfristige Updates zu Veranstaltungen erhalten.\", }, Required: false, }, { ID: \"my.custom.consent\", Register: user.ConsentText{ Label: \"Accept something completely different.\", }, Profile: user.ConsentText{ Label: \"Accept something completely different.\", }, Required: false, }, } // apply settings option.MustZero(option.Must(cfg.SettingsManagement()).UseCases.StoreGlobal(user.SU(), usrSettings)) } ","image#Image":" ","info#Info":"More static content."},"title":"Tutorial 26"},"/docs/examples/tutorial-26-buildin-iam/readme/":{"data":{"identity-und-access-management#Identity und Access Management":"Identity und Access ManagementDie Implementierung hat ein integriertes Authentifizierungs- und Autorisierungssystem. Grundsätzlich ist das System darauf ausgelegt, dass die Wahrheit über die Identität eines Nutzers im System selbst liegt. Das bleibt auch für den Fall so, wenn die Authentifizierung über externe SSO-Anbieter wie Microsoft Entra, Login-With-Amazon oder Google erfolgt. Hintergrund ist, dass solche externen Nutzer üblicherweise außerhalb jeglicher Kontrolle durch uns oder den Kunden der Plattform selbst ist. Das bedeutet, dass nicht damit gerechnet werden kann, dass der Kunde Konten deaktivieren, Gruppen oder Rollen beim SSO-Anbieter verwalten kann. Deshalb liegt das komplette Permission, Group und Role-Management im System selbst.\nIm Folgenden wird ein minimales Beispiel gezeigt, wie mit dem System gearbeitet werden kann.\nUm das Projekt standardisiert zu bauen und weitere Schritte des Buildprozesses zu automatisieren ist sowieso ein Makefile praktisch. Füge dazu den folgenden Aussschnitt deinem Makefile hinzu.\nmacro: GOPROXY=direct go run github.com/worldiety/macro/cmd/expand@latest Das System ist ein reines OptIn System, sodass natürlich auch eine komplett eigene IAM-Logik umgesetzt werden kann - empfohlen sei das an dieser Stelle aber grundsätzlich nicht. Insbesondere sollte darauf verzichtet werden Passwörter oder Sessions zu verarbeiten. Der vorliegende Code wurde ge-reviewed und wird zentral gepflegt.\nSchaue dir am besten die IAM-Settings genau an und was die cfg.IAM Methode im Detail macht, um deine Möglichkeiten der Anpassung auszunutzen. Insbesondere sind sicherlich die ComponentFactoryIDs und der Decorator von besonderem Interesse, damit du das IAM-System nahtlos in deine eigene Seitenstruktur einbetten kannst und es zu keinen Brüchen in Navigation und Layout kommt.\n// #[go.permission.generateTable] package main import ( \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/auth\" \"go.wdy.de/nago/auth/iam\" \"go.wdy.de/nago/presentation/core\" \"go.wdy.de/nago/presentation/uilegacy\" \"go.wdy.de/nago/web/vuejs\" ) // sayHello greets everyone who has been authenticated. // #[@Usecase] // #[go.permission.audit] func sayHello(auth auth.Subject) (string, error) { if err := auth.Audit(\"de.worldiety.tutorial.say_hello\"); err != nil { return \"invalid\", err } return \"hello \" + auth.Name(), nil } func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) iamCfg := application.IAMSettings{} iamCfg.Permissions.Permissions = iam.PermissionsFrom(Permissions()) iamCfg = cfg.IAM(iamCfg) cfg.Component(\".\", func(wnd core.Window) core.Component { return ui.NewVBox(func(vbox *ui.VBox) { vbox.Append( ui.NewActionButton(\"Berechtigungen\", func() { wnd.Navigation().ForwardTo(iamCfg.Permissions.ID, nil) }), ui.NewActionButton(\"Benutzer\", func() { wnd.Navigation().ForwardTo(iamCfg.Users.ID, nil) }), ui.NewActionButton(\"Anmelden\", func() { wnd.Navigation().ForwardTo(iamCfg.Login.ID, nil) }), ui.NewActionButton(\"Abmelden\", func() { wnd.Navigation().ForwardTo(iamCfg.Logout.ID, nil) }), ) msg, err := sayHello(wnd.Subject()) vbox.Append(ui.MakeText(fmt.Sprintf(\"%s:%v\", msg, err))) }) }) }).Run() } "},"title":"README"},"/docs/examples/tutorial-27-picker/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/pkg/std\" \"go.wdy.de/nago/presentation/core\" . \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/presentation/ui/alert\" \"go.wdy.de/nago/presentation/ui/picker\" \"go.wdy.de/nago/web/vuejs\" ) type Person struct { Vorname, Nachname string } func (p Person) String() string { return fmt.Sprintf(\"%s %s\", p.Vorname, p.Nachname) } var names = []string{\"Baba\", \"Noah\", \"Ethan\", \"Olivia\", \"Isabella\", \"Jacob\", \"Ava\", \"Liam\", \"Logan\", \"Sophia\", \"Emily\", \"Michael\", \"Madison\", \"Matthew\", \"Jack\", \"Mia\", \"Hannah\", \"Ryan\", \"Abigail\"} func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) var persons []Person for _, first := range names { for _, second := range names { persons = append(persons, Person{first, second}) } } cfg.RootView(\".\", func(wnd core.Window) core.View { enabled := core.AutoState[bool](wnd) personState := core.AutoState[[]Person](wnd).Init(func() []Person { return []Person{persons[5]} }) personState.Observe(func(newValue []Person) { enabled.Set(len(newValue) \u003e 0) }) err := std.NewLocalizedError(\"hello\", \"hello world\") return VStack( picker.Picker[Person](\"Personen\", persons, personState). SupportingText(\"Wähle jemanden aus\"). Title(\"Alle Personen\"). MultiSelect(true). //ErrorText(\"Falsch\"). Frame(Frame{Width: L320}), PrimaryButton(func() { fmt.Println(personState) }).Title(\"print selected\").Enabled(enabled.Get()), alert.BannerError(err), ). Frame(Frame{}.MatchScreen()) }) }).Run() } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 27"},"/docs/examples/tutorial-28-scrollview/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" . \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.RootView(\".\", func(wnd core.Window) core.View { return VStack( Text(\"vertical scroll view\"), ScrollView( VStack( Image().URI(\"https://picsum.photos/id/12/200/300\").Frame(Frame{Width: \"200dp\", Height: \"300dp\"}), Image().URI(\"https://picsum.photos/id/13/200/300\").Frame(Frame{Width: \"200dp\", Height: \"300dp\"}), Image().URI(\"https://picsum.photos/id/14/200/300\").Frame(Frame{Width: \"200dp\", Height: \"300dp\"}), ), ).Frame(Frame{Width: \"200dp\", Height: \"450dp\"}), Text(\"horizontal scroll view\"), ScrollView( HStack( Image().URI(\"https://picsum.photos/id/12/200/300\").Frame(Frame{Width: \"200dp\", Height: \"300dp\"}), Image().URI(\"https://picsum.photos/id/13/200/300\").Frame(Frame{Width: \"200dp\", Height: \"300dp\"}), Image().URI(\"https://picsum.photos/id/14/200/300\").Frame(Frame{Width: \"200dp\", Height: \"300dp\"}), ), ).Axis(ScrollViewAxisHorizontal). Frame(Frame{Width: \"300dp\", Height: \"300dp\"}), ).Frame(Frame{}.MatchScreen()) }) }).Run() } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 28"},"/docs/examples/tutorial-29-timepicker/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" . \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/presentation/ui/timepicker\" \"go.wdy.de/nago/web/vuejs\" \"time\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.RootView(\".\", func(wnd core.Window) core.View { duration := core.AutoState[time.Duration](wnd).Init(func() time.Duration { return time.Minute * 61 }) return VStack( timepicker.Picker(\"Dauer\", duration). SupportingText(\"Wähle eine tolle Zeit\"). Format(timepicker.DecomposedFormat). Days(true). Hours(true). Minutes(true). Seconds(true), ). Frame(Frame{}.MatchScreen()) }) }).Run() } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 29"},"/docs/examples/tutorial-30-grid/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" . \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.RootView(\".\", func(wnd core.Window) core.View { return VStack( Text(\"A simple grid row, by default cells are spanned completely\"), Grid( GridCell(Text(\"cell 1\").BackgroundColor(\"#ff0000\")), GridCell(Text(\"cell 2\").BackgroundColor(\"#ff0000\")), GridCell(Text(\"cell 3\").BackgroundColor(\"#ff0000\")), ). Rows(1). BackgroundColor(\"#00ff00\"). Frame(Frame{}.Size(L320, L320)), Text(\"A simple grid row using stacks for alignment\"), Grid( GridCell(VStack(Text(\"cell 1\").BackgroundColor(\"#ff0000\")).Alignment(Leading)), GridCell(VStack(Text(\"cell 2\").BackgroundColor(\"#ff0000\")).Alignment(Center)).BackgroundColor(\"#0000ff\"), GridCell(VStack(Text(\"cell 3\").BackgroundColor(\"#ff0000\")).Alignment(Trailing)), ). Rows(1). BackgroundColor(\"#00ff00\"). Frame(Frame{}.Size(L320, L320)), Text(\"Cell alignment rules\"), Grid( GridCell(Text(\"Leading\").BackgroundColor(\"#ff0000\")). Alignment(Leading), GridCell(Text(\"Center\").BackgroundColor(\"#ff0000\")). Alignment(Center), GridCell(Text(\"Trailing\").BackgroundColor(\"#ff0000\")). Alignment(Trailing), GridCell(Text(\"Top\").BackgroundColor(\"#ff0000\")). Alignment(Top), GridCell(Text(\"Bottom\").BackgroundColor(\"#ff0000\")). Alignment(Bottom), GridCell(Text(\"TopLeading\").BackgroundColor(\"#ff0000\")). Alignment(TopLeading), GridCell(Text(\"TopTrailing\").BackgroundColor(\"#ff0000\")). Alignment(TopTrailing), GridCell(Text(\"BottomLeading\").BackgroundColor(\"#ff0000\")). Alignment(BottomLeading), GridCell(Text(\"BottomTrailing\").BackgroundColor(\"#ff0000\")). Alignment(BottomTrailing), ). Rows(1). BackgroundColor(\"#00ff00\"). Frame(Frame{}.Size(\"100%\", L320)), ). Frame(Frame{}.MatchScreen()) }) }).Run() } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 30"},"/docs/examples/tutorial-32-crudform/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"go.wdy.de/nago/application\" \"go.wdy.de/nago/pkg/data\" \"go.wdy.de/nago/pkg/std\" \"go.wdy.de/nago/pkg/xtime\" \"go.wdy.de/nago/presentation/core\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/presentation/ui/crud\" \"go.wdy.de/nago/web/vuejs\" ) type HelferID string type Helfer struct { ID HelferID Name string } func (h Helfer) Identity() HelferID { return h.ID } type EventID string type Event struct { ID EventID Name string Note1, Note2, Note3 string GeplanteHelfer []HelferID Abfahrt std.Option[Abfahrt] RadioVariant string } type Abfahrt struct { Zeit xtime.Date AbfahrtOrt AddressID } type AddressID string func (e Event) Identity() EventID { return e.ID } type Events data.Repository[Event, EventID] type Helfers data.Repository[Helfer, HelferID] func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) events := application.SloppyRepository[Event, EventID](cfg) helfers := application.SloppyRepository[Helfer, HelferID](cfg) /*\tgo func() { for range 1000 { events.Save(Event{ID: data.RandIdent[EventID]()}) time.Sleep(100 * time.Millisecond) helfers.Save(Helfer{ID: data.RandIdent[HelferID]()}) } }() go func() { for range 500 { events.Save(Event{ID: data.RandIdent[EventID]()}) time.Sleep(10 * time.Millisecond) helfers.Save(Helfer{ID: data.RandIdent[HelferID]()}) } os.Exit(-1) }()*/ cfg.RootView(\".\", func(wnd core.Window) core.View { bnd := crud.NewBinding[Event](wnd) bnd.Add( crud.Text(crud.TextOptions{Label: \"Name\"}, crud.Ptr(func(entity *Event) *string { return \u0026entity.Name })).WithValidation(func(evt Event) (errorText string, infrastructureError error) { if evt.Name == \"\" { return \"Darf nicht leer sein\", nil } return \"\", nil }).WithSupportingText(\"Gib Deinen Namen an\"), ) // assemble complex and nested section with rows var noteSectionFields []crud.Field[Event] noteSectionFields = append(noteSectionFields, crud.Text(crud.TextOptions{Label: \"Note1\"}, crud.Ptr(func(entity *Event) *string { return \u0026entity.Note1 })).WithValidation(func(event Event) (errorText string, infrastructureError error) { if event.Note1 == \"\" { return \"Notiz 1 muss ausgefüllt sein\", nil } return \"\", nil }), crud.Text(crud.TextOptions{Label: \"Note2\"}, crud.Ptr(func(entity *Event) *string { return \u0026entity.Note2 })).WithValidation(func(event Event) (errorText string, infrastructureError error) { if event.Note2 == \"\" { return \"Notiz 2 muss ausgefüllt sein\", nil } return \"\", nil }), crud.Text(crud.TextOptions{Label: \"Note3\"}, crud.Ptr(func(entity *Event) *string { return \u0026entity.Note3 })), crud.PickOne(crud.PickOneOptions[string]{Label: \"Radio Gaga\", Values: []string{\"Gaga\", \"Gugu\"}, Style: crud.PickOneStyleWithRadioButton}, crud.PropertyFuncs( func(e *Event) std.Option[string] { if e.RadioVariant == \"\" { return std.None[string]() } return std.Some(e.RadioVariant) }, func(dst *Event, v std.Option[string]) { dst.RadioVariant = v.UnwrapOr(\"\") }, )), ) noteSectionFields = append(noteSectionFields, crud.Row( crud.FormColumn(crud.Text(crud.TextOptions{Label: \"Note1\"}, crud.Ptr(func(entity *Event) *string { return \u0026entity.Note1 })), 0.33), crud.FormColumn(crud.Text(crud.TextOptions{Label: \"Note3\"}, crud.Ptr(func(entity *Event) *string { return \u0026entity.Note3 })), 0.66), )...) noteSectionFields = append(noteSectionFields, crud.HLine[Event]()) noteSectionFields = append(noteSectionFields, crud.OptionalFields( crud.OptionalFieldsOptions{ Label: \"Optionale Felder\", Enabled: false, }, crud.Row( crud.FormColumn(crud.Text(crud.TextOptions{Label: \"Note1\"}, crud.Ptr(func(entity *Event) *string { return \u0026entity.Note1 })), 0.33), crud.FormColumn(crud.Text(crud.TextOptions{Label: \"Note3\"}, crud.Ptr(func(entity *Event) *string { return \u0026entity.Note3 })), 0.66), )..., )...) bnd.Add(crud.Section(\"Notizen\", noteSectionFields..., )...) // without section bnd.Add(crud.Row( crud.FormColumn(crud.Text(crud.TextOptions{Label: \"Note1\"}, crud.Ptr(func(entity *Event) *string { return \u0026entity.Note1 })), 0.33), crud.FormColumn(crud.Text(crud.TextOptions{Label: \"Note3\"}, crud.Ptr(func(entity *Event) *string { return \u0026entity.Note3 })), 0.66), )...) // foreign key helper helferBnd := crud.NewBinding[Helfer](wnd).Add( crud.Text(crud.TextOptions{Label: \"Vorname\"}, crud.Ptr(func(model *Helfer) *string { return \u0026model.Name })), ) bnd.Add( crud.Section[Event](\"\", crud.OneToManyTable[Event, Helfer, HelferID]( crud.OneToManyTableOptions[Helfer, HelferID]{ Label: \"Helfer\", ForeignEntities: helfers.All(), ForeignBinding: helferBnd, ForeignZero: Helfer{}, ForeignCreate: func(helfer Helfer) (errorText string, infrastructureError error) { helfer.ID = data.RandIdent[HelferID]() err := helfers.Save(helfer) return \"\", err }, ForeignPickerRenderer: func(helfer Helfer) core.View { return ui.Text(helfer.Name) }, }, crud.Ptr( func(model *Event) *[]HelferID { return \u0026model.GeplanteHelfer }, ), ))..., ) return ui.VStack( crud.View[Event, EventID]( crud.Options[Event, EventID](bnd). Actions( crud.ButtonCreate[Event](bnd, Event{ID: \"do not randomize here\"}, func(evt Event) (errorText string, infrastructureError error) { if !bnd.Validates(evt) { return \"irgendein validation fehler, gugg hin\", nil } evt.ID = data.RandIdent[EventID]() // create a unique ID here return \"\", events.Save(evt) }), ). FindAll(events.All()). Title(\"Events\"), ), ).Padding(ui.Padding{}.All(ui.L16)).Frame(ui.Frame{}.FullWidth()) }) }).Run() } ","info#Info":"More static content."},"title":"Tutorial 32"},"/docs/examples/tutorial-33-colorpicker/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" . \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/presentation/ui/colorpicker\" \"go.wdy.de/nago/web/vuejs\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.RootView(\".\", func(wnd core.Window) core.View { color := core.AutoState[Color](wnd) return VStack( colorpicker.PalettePicker(\"Deine Lieblingsfarbe\", colorpicker.DefaultPalette).Value(color.Get()).State(color). Title(\"Bitte Farbe wählen\"), ).Gap(L16). Frame(Frame{}.MatchScreen()) }) }).Run() } ","info#Info":"More static content."},"title":"Tutorial 33"},"/docs/examples/tutorial-34-autocrud/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License // #[go.permission.generateTable] package main import ( \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/application/group\" \"go.wdy.de/nago/pkg/std\" \"go.wdy.de/nago/presentation/core\" heroSolid \"go.wdy.de/nago/presentation/icons/hero/solid\" \"go.wdy.de/nago/presentation/ui/alert\" \"go.wdy.de/nago/presentation/ui/crud\" \"go.wdy.de/nago/presentation/ui/form\" \"go.wdy.de/nago/web/vuejs\" \"time\" ) type PersonID string type Person struct { ID PersonID `visible:\"false\"` Vorname string `table-visible:\"false\"` Nachname string `label:\"Zuname\"` Nr string `section:\"Adressdaten\"` Strasse string `section:\"Adressdaten\"` Anrede string `values:\"[\\\"Herr\\\",\\\"Frau\\\"]\"` Friends []PersonID `source:\"persons\"` } func (p Person) Identity() PersonID { return p.ID } func (p Person) WithIdentity(id PersonID) Person { p.ID = id return p } func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) // this must happen before IAM init, otherwise the permissions are missing persons := application.SloppyRepository[Person](cfg) useCases := crud.NewUseCases(\"de.tutorial.person\", persons) cfg.AddSystemService(\"persons\", form.AnyUseCaseList(useCases.FindAll)) std.Must(std.Must(cfg.UserManagement()).UseCases.EnableBootstrapAdmin(time.Now().Add(time.Hour), \"8fb8724f-e604-444c-9671-58d07dd76164\")) std.Must(std.Must(cfg.UserManagement()).UseCases.EnableBootstrapAdmin(time.Now().Add(time.Hour), \"8fb8724f-e604-444c-9671-58d07dd76164\")) std.Must(cfg.Authentication()) cfg.SetDecorator(cfg.NewScaffold(). MenuEntry().Icon(heroSolid.BellSnooze).Action(func(wnd core.Window) { alert.ShowBannerMessage(wnd, alert.Message{Title: \"snack it\", Message: \"nom nom\" + time.Now().String()}) }).Private(). MenuEntry().Icon(heroSolid.ArchiveBox).Title(\"Archiv\").Action(func(wnd core.Window) { alert.ShowBannerError(wnd, fmt.Errorf(\"archiv not implemented, db password=1234\")) }).Public(). MenuEntry().Icon(heroSolid.Battery50).Title(\"Status\").OneOf(group.PermFindByID). Decorator()) cfg.RootView(\".\", cfg.DecorateRootView(crud.AutoRootView(crud.AutoRootViewOptions{ Title: \"Personen\", }, useCases))) cfg.OnDestroy(func() { fmt.Println(\"regular shutdown\") }) }).Run() } ","info#Info":"More static content."},"title":"Tutorial 34"},"/docs/examples/tutorial-35-httpflow/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" \"log/slog\" \"net/http\" \"net/url\" \"slices\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) // simulate some http redirect endpoint cfg.HandleFunc(\"/api/v1/oauth2/login\", func(w http.ResponseWriter, r *http.Request) { slog.Info(\"got login request\") redirectUri := r.URL.Query().Get(\"redirect_uri\") if redirectUri != \"/redirect\" { slog.Info(\"wrong redirect uri\") _, _ = w.Write([]byte(\"permission denied\")) return } u, err := url.Parse(redirectUri) if err != nil { slog.Info(\"bad request\", \"err\", err) w.WriteHeader(http.StatusBadRequest) return } q := u.Query() q.Set(\"response_type\", \"code id_token\") q.Set(\"scope\", \"openid 1234\") q.Set(\"state\", r.URL.Query().Get(\"state\")) u.RawQuery = q.Encode() slog.Info(\"redirected to\", \"uri\", u.String()) http.Redirect(w, r, u.String(), http.StatusFound) }) // index page to start the flow cfg.RootView(\".\", func(wnd core.Window) core.View { return ui.VStack( ui.PrimaryButton(func() { core.HTTPFlow(wnd.Navigation(), \"/api/v1/oauth2/login?redirect_uri=/redirect\u0026state=xyz\", \"/redirect\", \"redirect\") }).Title(\"start http-flow\")). Frame(ui.Frame{}.MatchScreen()) }) // receiver page, which will be redirected to, either by browser directly or from app indirectly after intercepting webview callback cfg.RootView(\"redirect\", func(wnd core.Window) core.View { return ui.VStack( slices.Collect(func(yield func(view core.View) bool) { yield(ui.Text(\"redirect target\")) for k, v := range wnd.Values() { yield(ui.Text(fmt.Sprintf(\"%s = %s\", k, v))) } })..., ). Frame(ui.Frame{}.MatchScreen()) }) }).Run() } ","info#Info":"More static content."},"title":"Tutorial 35"},"/docs/examples/tutorial-36-list/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" heroSolid \"go.wdy.de/nago/presentation/icons/hero/solid\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/presentation/ui/list\" \"go.wdy.de/nago/web/vuejs\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.RootView(\".\", func(wnd core.Window) core.View { return ui.VStack( list.List( list.Entry(). Leading(ui.MailTo(wnd, \"test@test.de\", \"test@test.de\")). Headline(\"Bilbo\"). SupportingText(\"Ein Beutlin.\"). Trailing(ui.ImageIcon(heroSolid.ArrowRight)), list.Entry(). Leading(ui.ImageIcon(heroSolid.XMark)). Headline(\"Gollumn\"). SupportingText(\"Ein Hobbit.\"). Trailing(ui.ImageIcon(heroSolid.ArrowRight)), ).Caption(ui.Text(\"Alle Teilnehmer\")). Footer(ui.Text(\"2 Einträge\")). Frame(ui.Frame{Width: ui.L400}), ).Frame(ui.Frame{}.MatchScreen()) }) }).Run() } ","info#Info":"More static content."},"title":"Tutorial 36"},"/docs/examples/tutorial-37-template/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"github.com/worldiety/option\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/pkg/std\" \"go.wdy.de/nago/presentation/core\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" \"time\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial_37\") cfg.Serve(vuejs.Dist()) cfg.SetDecorator(cfg.NewScaffold().Decorator()) option.MustZero(cfg.StandardSystems()) option.Must(cfg.TemplateManagement()) std.Must(std.Must(cfg.UserManagement()).UseCases.EnableBootstrapAdmin(time.Now().Add(time.Hour), \"%6UbRsCuM8N$auy\")) cfg.RootViewWithDecoration(\".\", func(wnd core.Window) core.View { return ui.Text(\"hello world\") }) }).Run() } ","info#Info":"More static content."},"title":"Tutorial 37"},"/docs/examples/tutorial-38-crudcalc/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/presentation/ui/crud\" \"go.wdy.de/nago/web/vuejs\" ) type Invoice struct { ID string A int B int } func (i Invoice) Identity() string { return i.ID } func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.RootView(\".\", func(wnd core.Window) core.View { bnd := crud.NewBinding[Invoice](wnd) bnd.Add( crud.Int(crud.IntOptions{Label: \"A\"}, crud.Ptr(func(model *Invoice) *int { return \u0026model.A })), crud.Int(crud.IntOptions{Label: \"B\"}, crud.Ptr(func(model *Invoice) *int { return \u0026model.B })), crud.Text(crud.TextOptions{Label: \"A+B\"}, crud.Ptr(func(model *Invoice) *string { tmp := fmt.Sprintf(\"%.2f\", float64(model.A+model.B)) return \u0026tmp })), ) state := core.AutoState[Invoice](wnd) return ui.VStack( crud.Form(bnd, state)). Frame(ui.Frame{}.MatchScreen()) }) }).Run() } ","info#Info":"More static content."},"title":"Tutorial 38"},"/docs/examples/tutorial-39-licenses/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"github.com/worldiety/enum\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/application/license\" \"go.wdy.de/nago/application/secret\" \"go.wdy.de/nago/pkg/std\" \"go.wdy.de/nago/presentation/core\" heroSolid \"go.wdy.de/nago/presentation/icons/hero/solid\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" \"time\" ) var ( _ = enum.Variant[secret.Credentials, secret.Jira]() _ = enum.Variant[secret.Credentials, secret.BookStack]() ) var licensePucBasic = license.UserLicense{ID: \"de.worldiety.puc.license.user.chat\", Name: \"PUC Basic License\", MaxUsers: 10, Url: \"https://www.worldiety.de/loesungen/puc\"} var licensePucImage = license.UserLicense{ID: \"de.worldiety.puc.license.user.img\", Name: \"PUC Image License\", MaxUsers: 5, Url: \"https://www.worldiety.de/loesungen/puc\"} var licensePucJira = license.AppLicense{ ID: \"de.worldiety.puc.license.app.jira\", Name: \"PUC Jira License\", Description: \"Hiermit erhält PUC grundsätzlich Zugriff auf Jira Instanzen.\", Url: \"https://www.worldiety.de/loesungen/puc#quellenangabe\", Incentive: \"mailto:einkauf@worldiety.de?subject=PUC%20JIRA%20Lizenz\u0026body=Liebes%20PUC%20Team%2C%0A%0Aich%20muss%20unbedingt%20die%20JIRA%20Integration%20freigeschaltet%20bekommen.%0A%0AViele%20Gr%C3%BC%C3%9Fe\", } func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) // declare some hardcoded licenses and insert them at startup users := std.Must(cfg.UserManagement()) licenses := std.Must(cfg.LicenseManagement()) // note that user-license MaxUser number is not reset, if upserted std.Must(licenses.UseCases.PerUser.Upsert(users.UseCases.SysUser(), licensePucBasic)) std.Must(licenses.UseCases.PerUser.Upsert(users.UseCases.SysUser(), licensePucImage)) // note that app-license enabled flag is not reset, if upserted std.Must(licenses.UseCases.PerApp.Upsert(users.UseCases.SysUser(), licensePucJira)) std.Must(cfg.BackupManagement()) std.Must(cfg.MailManagement()) std.Must(cfg.SessionManagement()) std.Must(std.Must(cfg.UserManagement()).UseCases.EnableBootstrapAdmin(time.Now().Add(time.Hour), \"%6UbRsCuM8N$auy\")) cfg.SetDecorator(cfg.NewScaffold(). Logo(ui.Image().Embed(heroSolid.AcademicCap).Frame(ui.Frame{}.Size(ui.L96, ui.L96))). Decorator()) cfg.RootView(\".\", cfg.DecorateRootView(func(wnd core.Window) core.View { return ui.VStack( ui.Text(fmt.Sprintf(\"%s: %v\", wnd.Session().ID(), wnd.Session().AuthenticatedAt())), ui.Text(\"User scoped enabled licenses:\").Font(ui.Title), ui.VStack( ui.Each(wnd.Subject().Licenses(), func(t license.ID) core.View { return ui.Text(fmt.Sprintf(\"%v\", t)) })..., ), ) })) }).Run() } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 39"},"/docs/examples/tutorial-40-images/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License // #[go.permission.generateTable] package main import ( \"go.wdy.de/nago/application\" \"go.wdy.de/nago/application/image\" \"go.wdy.de/nago/pkg/std\" \"go.wdy.de/nago/presentation/ui/crud\" \"go.wdy.de/nago/web/vuejs\" ) type PersonID string type Person struct { ID PersonID `visible:\"false\"` Vorname string `table-visible:\"false\"` Nachname string `label:\"Zuname\"` Nr string `section:\"Adressdaten\"` Strasse string `section:\"Adressdaten\"` Anrede string `values:\"[\\\"Herr\\\",\\\"Frau\\\"]\"` Profile image.ID `style:\"avatar\"` Teaser image.ID `json:\"teaser2\"` } func (p Person) Paraphe() string { return p.Vorname + \" \" + p.Nachname } func (p Person) Identity() PersonID { return p.ID } func (p Person) WithIdentity(id PersonID) Person { p.ID = id return p } func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) std.Must(cfg.Authentication()) persons := application.SloppyRepository[Person](cfg) useCases := crud.NewUseCases(\"de.tutorial.person\", persons) cfg.SetDecorator(cfg.NewScaffold().Decorator()) cfg.RootView(\".\", cfg.DecorateRootView(crud.AutoRootView(crud.AutoRootViewOptions{ Title: \"Personen\", }, useCases))) }).Run() } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 40"},"/docs/examples/tutorial-41-absolute/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/pkg/std\" \"go.wdy.de/nago/presentation/core\" heroSolid \"go.wdy.de/nago/presentation/icons/hero/solid\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" \"time\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) std.Must(std.Must(cfg.UserManagement()).UseCases.EnableBootstrapAdmin(time.Now().Add(time.Hour), \"8fb8724f-e604-444c-9671-58d07dd76164\")) cfg.SetDecorator(cfg.NewScaffold(). Logo(ui.Image().Embed(heroSolid.AcademicCap).Frame(ui.Frame{}.Size(ui.L96, ui.L96))). Decorator()) cfg.RootView(\".\", cfg.DecorateRootView(func(wnd core.Window) core.View { return ui.VStack( createLayout(makeSchedule(), 30)..., ). // set the parent to offset/relative to become a parent for the contained absolute positions Position(ui.Position{Type: ui.PositionOffset}). BackgroundColor(ui.ColorCardTop). Frame(ui.Frame{}.Size(\"60rem\", \"30rem\")) })) }).Run() } func createLayout(schedule []Class, maxRemHeight float64) []core.View { var res []core.View for i, class := range schedule { top := fmt.Sprintf(\"%.2frem\", class.Start*maxRemHeight) height := fmt.Sprintf(\"%.2frem\", (class.End-class.Start)*maxRemHeight) res = append(res, ui.HStack( ui.Text(class.Title).Color(ui.ColorBlack), ). Position(ui.Position{ Type: ui.PositionAbsolute, // shift them to the right for better overlap perception Left: ui.Length(fmt.Sprintf(\"%.2frem\", 8*float64(i))), // start at our custom top offset Top: ui.Length(top), }). BackgroundColor(\"#ffffffaa\"). Border(ui.Border{}.Width(ui.L1).Radius(ui.L8).Color(\"#ffffff\")). // better use explicit width and height, due to offset semantics of right and bottom Frame(ui.Frame{}.Size(ui.L320, ui.Length(height))), ) } return res } type Class struct { Title string Start float64 End float64 } func makeSchedule() []Class { return []Class{ {\"Verteidigung gegen die dunklen Künste\", 0.083, 0.167}, {\"Zaubertränke\", 0.183, 0.237}, {\"Verwandlung\", 0.213, 0.467}, {\"Kräuterkunde\", 0.383, 0.467}, {\"Geschichte der Zauberei\", 0.483, 0.567}, {\"Astronomie\", 0.283, 0.667}, {\"Pflege magischer Geschöpfe\", 0.683, 0.767}, {\"Flugunterricht\", 0.583, 0.867}, {\"Arithmantik\", 0.843, 0.967}, } } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 41"},"/docs/examples/tutorial-42-service/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"context\" \"fmt\" \"github.com/worldiety/enum\" \"github.com/worldiety/option\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/application/scheduler\" cfgscheduler \"go.wdy.de/nago/application/scheduler/cfg\" \"go.wdy.de/nago/application/secret\" \"go.wdy.de/nago/application/user\" \"go.wdy.de/nago/pkg/std\" \"go.wdy.de/nago/presentation/core\" heroSolid \"go.wdy.de/nago/presentation/icons/hero/solid\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" \"time\" ) var _ = enum.Variant[secret.Credentials, secret.BookStack]() func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) std.Must(std.Must(cfg.UserManagement()).UseCases.EnableBootstrapAdmin(time.Now().Add(time.Hour), \"8fb8724f-e604-444c-9671-58d07dd76164\")) option.MustZero(cfg.StandardSystems()) cfg.SetDecorator(cfg.NewScaffold(). Logo(ui.Image().Embed(heroSolid.AcademicCap).Frame(ui.Frame{}.Size(ui.L96, ui.L96))). Decorator()) schedulerManagement := std.Must(cfgscheduler.Enable(cfg)) option.MustZero(schedulerManagement.UseCases.Configure(user.SU(), scheduler.Options{ ID: \"my.test.scheduler\", Name: \"One Shot hello world\", Description: \"This scheduler just runs once after start and is done\", Kind: scheduler.OneShot, Runner: func(ctx context.Context) error { log := scheduler.LoggerFrom(ctx) log.Info(\"hello world\", \"a\", \"b\") return nil }, Actions: []scheduler.CustomAction{ { Title: \"hello world\", Action: func(ctx context.Context) { fmt.Println(\"hello world\") }, }, { Title: \"hello world\", Action: func(ctx context.Context) { fmt.Println(\"hello world\") }, }, }, })) option.MustZero(schedulerManagement.UseCases.Configure(user.SU(), scheduler.Options{ ID: \"my.test.failure\", Name: \"Fail with random\", Description: \"This scheduler runs scheduled and fails in random ways\", Kind: scheduler.Schedule, Defaults: scheduler.Settings{ StartDelay: time.Second, PauseTime: time.Second * 10, }, Runner: func(ctx context.Context) error { log := scheduler.LoggerFrom(ctx) log.Info(\"hello world\") for range 100 { if ctx.Err() != nil { return ctx.Err() } time.Sleep(time.Millisecond * 500) r := time.Now().UnixMilli() % 1234 switch r { case 0: panic(\"ops - started to panic\") case 1: return fmt.Errorf(\"failed randomly\") default: log.Info(\"the random source did not hit me\", \"value\", r) } } return nil }, })) cfg.RootView(\".\", cfg.DecorateRootView(func(wnd core.Window) core.View { return ui.Text(\"hello service\") })) }).Run() } ","info#Info":"More static content."},"title":"Tutorial 42"},"/docs/examples/tutorial-43-clipboard/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" heroSolid \"go.wdy.de/nago/presentation/icons/hero/solid\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/presentation/ui/alert\" \"go.wdy.de/nago/web/vuejs\" \"time\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.SetDecorator(cfg.NewScaffold(). Logo(ui.Image().Embed(heroSolid.AcademicCap).Frame(ui.Frame{}.Size(ui.L96, ui.L96))). Decorator()) cfg.RootView(\".\", cfg.DecorateRootView(func(wnd core.Window) core.View { return ui.VStack( ui.PrimaryButton(func() { if err := wnd.Clipboard().SetText(fmt.Sprintf(\"hello world: %v\", time.Now())); err != nil { alert.ShowBannerError(wnd, err) return } }).Title(\"copy to clipboard\"), ).Frame(ui.Frame{}.MatchScreen()) })) }).Run() } ","info#Info":"More static content."},"title":"Tutorial 43"},"/docs/examples/tutorial-44-stretch/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" heroSolid \"go.wdy.de/nago/presentation/icons/hero/solid\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.SetDecorator(cfg.NewScaffold(). Logo(ui.Image().Embed(heroSolid.AcademicCap).Frame(ui.Frame{}.Size(ui.L96, ui.L96))). Decorator()) cfg.RootView(\".\", cfg.DecorateRootView(func(wnd core.Window) core.View { return ui.VStack( ui.HStack( ui.VStack(). BackgroundColor(ui.ColorError). Border(ui.Border{TopLeftRadius: ui.L8, BottomLeftRadius: ui.L8}).Frame(ui.Frame{}.Size(ui.L16, ui.Auto)), ui.VStack( ui.Text(\"hello\"), ui.Text(\"world\"), ). BackgroundColor(ui.ColorCardFooter), ui.VStack( ui.Text(\"hello\"), ui.Text(\"world\"), ui.Text(\"world\"), ui.Text(\"world\"), ui.Text(\"world\"), ).BackgroundColor(ui.ColorIconsMuted), ).Alignment(ui.Stretch), ).Frame(ui.Frame{}.MatchScreen()) })) }).Run() } ","info#Info":"More static content."},"title":"Tutorial 44"},"/docs/examples/tutorial-45-benchmark/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" heroSolid \"go.wdy.de/nago/presentation/icons/hero/solid\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" \"time\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.SetDecorator(cfg.NewScaffold(). Logo(ui.Image().Embed(heroSolid.AcademicCap).Frame(ui.Frame{}.Size(ui.L96, ui.L96))). Decorator()) cfg.RootView(\".\", cfg.DecorateRootView(func(wnd core.Window) core.View { var tmp []core.View tmp = append(tmp, ui.Text(fmt.Sprintf(\"%v\", time.Now())), ui.PrimaryButton(nil).Title(\"hello\"), ui.PrimaryButton(nil).Title(\"world\"), ui.PrimaryButton(nil).Title(\"see\"), ui.PrimaryButton(nil).Title(\"how\"), ui.PrimaryButton(nil).Title(\"slow\"), ui.PrimaryButton(nil).Title(\"the hover\"), ) for i := range 1000 { // just make it a bit more complex tmp = append(tmp, ui.VStack( ui.HStack( ui.Text(fmt.Sprintf(\"Zeile %d\", i)), ), )) } return ui.RedrawAtFixedRate(wnd, time.Second, ui.VStack(tmp...).FullWidth()) })) }).Run() } ","info#Info":"More static content."},"title":"Tutorial 45"},"/docs/examples/tutorial-46-rootviews/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" heroSolid \"go.wdy.de/nago/presentation/icons/hero/solid\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.SetDecorator(cfg.NewScaffold(). Logo(ui.Image().Embed(heroSolid.AcademicCap).Frame(ui.Frame{}.Size(ui.L96, ui.L96))). Decorator()) cfg.RootView(\".\", cfg.DecorateRootView(func(wnd core.Window) core.View { return ui.VStack( ui.PrimaryButton(func() { wnd.Navigation().ForwardTo(\"hello\", core.Values{\"msg\": \"world\"}) }).Title(\"go to hello\"), ).Frame(ui.Frame{}.MatchScreen()) })) cfg.RootView(\"hello\", cfg.DecorateRootView(func(wnd core.Window) core.View { return ui.VStack( ui.Text(\"your message is hello \"+wnd.Values()[\"msg\"]), ui.PrimaryButton(func() { wnd.Navigation().Back() }).Title(\"back\"), ).Frame(ui.Frame{}.MatchScreen()) })) }).Run() } ","info#Info":"More static content."},"title":"Tutorial 46"},"/docs/examples/tutorial-47-eventbus/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"github.com/worldiety/option\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/application/user\" \"go.wdy.de/nago/pkg/events\" \"go.wdy.de/nago/presentation/core\" heroSolid \"go.wdy.de/nago/presentation/icons/hero/solid\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" \"log/slog\" ) type MyCustomEvent struct { Msg string } func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) option.MustZero(cfg.StandardSystems()) cfg.SetDecorator(cfg.NewScaffold(). Logo(ui.Image().Embed(heroSolid.AcademicCap).Frame(ui.Frame{}.Size(ui.L96, ui.L96))). Decorator()) evtBus := cfg.EventBus() cfg.RootView(\".\", cfg.DecorateRootView(func(wnd core.Window) core.View { msgState := core.AutoState[string](wnd) wnd.AddDestroyObserver(events.SubscribeFor[MyCustomEvent](evtBus, func(evt MyCustomEvent) { msgState.Set(\"custom event received: \" + evt.Msg) })) // open another tab and create a new user and watch how this message appears in the other tab. // Note, that you must \"notify\" the user, because otherwise the event will not occur (today). wnd.AddDestroyObserver(events.SubscribeFor[user.Created](evtBus, func(evt user.Created) { slog.Info(\"user created\", \"mail\", evt.Email) msgState.Set(\"user was created: \" + string(evt.Email)) })) return ui.VStack( ui.Text(\"Last message from bus: \"+msgState.Get()), ui.PrimaryButton(func() { evtBus.Publish(MyCustomEvent{Msg: \"hello\"}) }).Title(\"send message\"), ).Frame(ui.Frame{}.MatchScreen()) })) }).Run() } ","info#Info":"More static content."},"title":"Tutorial 47"},"/docs/examples/tutorial-48-form-auto/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/pkg/xtime\" \"go.wdy.de/nago/presentation/core\" heroSolid \"go.wdy.de/nago/presentation/icons/hero/solid\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/presentation/ui/form\" \"go.wdy.de/nago/web/vuejs\" ) type SomeThing struct { Name string `id:\"abc1234\"` When xtime.Date } func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.SetDecorator(cfg.NewScaffold(). Logo(ui.Image().Embed(heroSolid.AcademicCap).Frame(ui.Frame{}.Size(ui.L96, ui.L96))). Decorator()) cfg.RootView(\".\", cfg.DecorateRootView(func(wnd core.Window) core.View { thingState := core.AutoState[SomeThing](wnd) return ui.VStack( form.Auto(form.AutoOptions{}, thingState), ui.PrimaryButton(func() { fmt.Printf(\"Thing: %v\\n\", thingState.Get()) }).Title(\"print\"), ).Gap(ui.L8).Frame(ui.Frame{}.MatchScreen()) })) }).Run() } ","info#Info":"More static content."},"title":"Tutorial 48"},"/docs/examples/tutorial-49-svg/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( _ \"embed\" \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" heroSolid \"go.wdy.de/nago/presentation/icons/hero/solid\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" \"strings\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial\") cfg.Serve(vuejs.Dist()) cfg.SetDecorator(cfg.NewScaffold(). Logo(ui.Image().Embed(heroSolid.AcademicCap).Frame(ui.Frame{}.Size(ui.L96, ui.L96))). Decorator()) cfg.RootView(\".\", cfg.DecorateRootView(func(wnd core.Window) core.View { return ui.VStack( ClickableSVG{ Actions: [4]func(){ func() { fmt.Println(\"Hello world 0\") }, func() { fmt.Println(\"Hello world 1\") }, func() { fmt.Println(\"Hello world 2\") }, func() { fmt.Println(\"Hello world 3\") }, }, }, ).Gap(ui.L8).Frame(ui.Frame{}.MatchScreen()) })) }).Run() } //go:embed svg.svg var img string type ClickableSVG struct { Actions [4]func() } func (c ClickableSVG) Render(ctx core.RenderContext) core.RenderNode { // Important: place aria-valuenow attributes with the according callback pointer. We must misuse properly defined attributes, to pass them properly up the toolchain. tmp := img for i := range 4 { placeholder := fmt.Sprintf(\"VAR%d\", i) call := fmt.Sprintf(\"%d\", ctx.MountCallback(c.Actions[i])) tmp = strings.Replace(tmp, placeholder, call, 1) } return ui.Image().Embed(core.SVG(tmp)).Frame(ui.Frame{}.Size(ui.L480, ui.L480)).Render(ctx) } ","info#Info":"More static content."},"title":"Tutorial 49"},"/docs/examples/tutorial-50-settings/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"github.com/worldiety/enum\" \"github.com/worldiety/option\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/application/settings\" \"go.wdy.de/nago/pkg/std\" \"go.wdy.de/nago/presentation/core\" heroSolid \"go.wdy.de/nago/presentation/icons/hero/solid\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" \"time\" ) type TestModulSettings struct { _ any `title:\"Test Modul\" description:\"Super Test Module als globales Setting.\"` Some string Stuff string Flag bool Color ui.Color } func (t TestModulSettings) GlobalSettings() bool { return true } var _ = enum.Variant[settings.GlobalSettings, TestModulSettings]() func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial_50\") cfg.Serve(vuejs.Dist()) option.MustZero(cfg.StandardSystems()) option.Must(cfg.SettingsManagement()) std.Must(std.Must(cfg.UserManagement()).UseCases.EnableBootstrapAdmin(time.Now().Add(time.Hour), \"8fb8724f-e604-444c-9671-58d07dd76164\")) cfg.SetDecorator(cfg.NewScaffold(). Logo(ui.Image().Embed(heroSolid.AcademicCap).Frame(ui.Frame{}.Size(ui.L96, ui.L96))). Decorator()) cfg.RootView(\".\", cfg.DecorateRootView(func(wnd core.Window) core.View { return ui.Text(\"hello world\") })) }).Run() } ","info#Info":"More static content."},"title":"Tutorial 50"},"/docs/examples/tutorial-51-progress/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"go.wdy.de/nago/application\" \"go.wdy.de/nago/application/user\" uiuser \"go.wdy.de/nago/application/user/ui\" \"go.wdy.de/nago/presentation/core\" heroSolid \"go.wdy.de/nago/presentation/icons/hero/solid\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/presentation/ui/progress\" \"go.wdy.de/nago/web/vuejs\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial_50\") cfg.Serve(vuejs.Dist()) cfg.SetDecorator(cfg.NewScaffold(). Logo(ui.Image().Embed(heroSolid.AcademicCap).Frame(ui.Frame{}.Size(ui.L96, ui.L96))). Decorator()) cfg.RootView(\".\", cfg.DecorateRootView(func(wnd core.Window) core.View { pwdState := core.AutoState[string](wnd) indicator := user.CalculatePasswordStrength(pwdState.Get()) return ui.VStack( ui.Text(\"hello world\"), ui.TextField(\"Password\", pwdState.Get()).InputValue(pwdState), progress.LinearProgress().Progress(indicator.ComplexityScale), uiuser.PasswordStrengthView(wnd, indicator), ).Gap(ui.L8).Frame(ui.Frame{}.MatchScreen()) })) }).Run() } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 51"},"/docs/examples/tutorial-52-scaffoldbuilder/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"github.com/worldiety/option\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/pkg/std\" \"go.wdy.de/nago/presentation/core\" icons \"go.wdy.de/nago/presentation/icons/hero/outline\" heroSolid \"go.wdy.de/nago/presentation/icons/hero/solid\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" \"time\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial_52\") cfg.Serve(vuejs.Dist()) option.MustZero(cfg.StandardSystems()) std.Must(std.Must(cfg.UserManagement()).UseCases.EnableBootstrapAdmin(time.Now().Add(time.Hour), \"%6UbRsCuM8N$auy\")) cfg.SetDecorator(cfg.NewScaffold(). Login(true). Logo(ui.Image().Embed(heroSolid.AcademicCap).Frame(ui.Frame{}.Size(ui.L96, ui.L96))). MenuEntry().Icon(icons.SpeakerWave).Forward(\"/123\").Public(). SubmenuEntry(func(menu *application.SubMenuBuilder) { menu.Title(\"sub menu\") menu.MenuEntry().Title(\"first\").Action(func(wnd core.Window) { fmt.Println(\"clicked the first entry\") }) menu.MenuEntry().Title(\"second\").Forward(\".\").Public() menu.Icon(icons.QuestionMarkCircle) }). Breakpoint(1000). Decorator()) cfg.RootView(\".\", cfg.DecorateRootView(func(wnd core.Window) core.View { return ui.VStack( ui.Text(\"hello world!\"), ).Gap(ui.L8).Frame(ui.Frame{}.MatchScreen()) })) }).Run() } ","info#Info":"More static content."},"title":"Tutorial 52"},"/docs/examples/tutorial-53-countdown/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/presentation/ui/alert\" \"go.wdy.de/nago/web/vuejs\" \"time\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial_53\") cfg.Serve(vuejs.Dist()) cfg.SetDecorator(cfg.NewScaffold(). Login(false). Decorator()) cfg.RootView(\".\", cfg.DecorateRootView(func(wnd core.Window) core.View { done := core.AutoState[bool](wnd) nr := core.AutoState[int](wnd) fmt.Println(\"render was called\") return ui.VStack( ui.Text(\"hello world!\"), ui.PrimaryButton(func() { nr.Set(nr.Get() + 1) alert.ShowBannerMessage(wnd, alert.Message{ Title: \"ok message\", Message: fmt.Sprintf(\"Message no %d\", nr.Get()), Intent: alert.IntentOk, }) }).Title(\"Spawn\"), ui.If(done.Get(), ui.Text(\"timer is done\")), ui.CountDown(time.Second*10).Action(func() { done.Set(true) }).Style(ui.CountDownStyleClock). Done(done.Get()). Frame(ui.Frame{}.FullWidth()), ).Gap(ui.L8).Frame(ui.Frame{}.MatchScreen()) })) }).Run() } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 53"},"/docs/examples/tutorial-54-codeeditor/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/presentation/core\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial_54\") cfg.Serve(vuejs.Dist()) cfg.SetDecorator(cfg.NewScaffold(). Login(false). Decorator()) cfg.RootView(\".\", cfg.DecorateRootView(func(wnd core.Window) core.View { src := core.AutoState[string](wnd).Init(func() string { return `# hello h1 * some * bullet * point in my _markdown_! ` }).Observe(func(newValue string) { fmt.Println(\"got new value:\", newValue) }) return ui.VStack( ui.Text(\"hello world!\"), ui.CodeEditor(src.Get()). InputValue(src). Frame(ui.Frame{Height: ui.L560}.FullWidth()). Language(\"markdown\"), ).Gap(ui.L8).Frame(ui.Frame{}.MatchScreen()) })) }).Run() } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 54"},"/docs/examples/tutorial-55-theme/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"github.com/worldiety/option\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/application/theme\" \"go.wdy.de/nago/application/user\" \"go.wdy.de/nago/pkg/std\" \"go.wdy.de/nago/presentation/core\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/presentation/ui/form\" \"go.wdy.de/nago/web/vuejs\" \"time\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial_55\") cfg.Serve(vuejs.Dist()) cfg.SetDecorator(cfg.NewScaffold().Decorator()) option.MustZero(cfg.StandardSystems()) myTheme := option.Must(cfg.ThemeManagement()) if !option.Must(myTheme.UseCases.HasColors(user.SU())) { myBaseColors := theme.BaseColors{ Main: \"#f12af7\", Interactive: \"#2af4f7\", Accent: \"#5af72a\", } myDark := myTheme.UseCases.Calculations.DarkMode(myBaseColors) myLight := myTheme.UseCases.Calculations.LightMode(myBaseColors) option.MustZero(myTheme.UseCases.UpdateColors(user.SU(), theme.Colors{ Dark: myDark, Light: myLight, })) } std.Must(std.Must(cfg.UserManagement()).UseCases.EnableBootstrapAdmin(time.Now().Add(time.Hour), \"%6UbRsCuM8N$auy\")) cfg.RootViewWithDecoration(\".\", func(wnd core.Window) core.View { colorState := core.AutoState[theme.BaseColors](wnd).Init(func() theme.BaseColors { actual := option.Must(myTheme.UseCases.ReadColors(user.SU())) return theme.BaseColors{ Main: actual.Light.M0, Interactive: actual.Light.I0, Accent: actual.Light.A0, } }) return ui.VStack( ui.Text(\"hello theme\"), form.Auto[theme.BaseColors](form.AutoOptions{}, colorState).Frame(ui.Frame{MaxWidth: ui.L560, Width: ui.Full}), ui.PrimaryButton(func() { option.MustZero(myTheme.UseCases.ResetColors(user.SU())) fmt.Println(\"restart server to apply the effect\") }).Title(\"Reset Colors\"), ui.PrimaryButton(func() { option.MustZero(myTheme.UseCases.UpdateColors(user.SU(), theme.Colors{ Dark: myTheme.UseCases.Calculations.DarkMode(colorState.Get()), Light: myTheme.UseCases.Calculations.LightMode(colorState.Get()), })) wnd.Navigation().Reload() }).Title(\"Apply User Colors\"), ).Gap(ui.L16).Frame(ui.Frame{}.MatchScreen()) }) }).Run() } ","image#Image":" ","info#Info":"More static content."},"title":"Tutorial 55"},"/docs/examples/tutorial-56-rest/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"github.com/worldiety/option\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/application/hapi\" cfghapi \"go.wdy.de/nago/application/hapi/cfg\" \"go.wdy.de/nago/auth\" \"go.wdy.de/nago/pkg/std\" \"go.wdy.de/nago/pkg/stoplight\" \"go.wdy.de/nago/presentation/core\" . \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" \"mime/multipart\" \"net/url\" \"time\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial_56\") cfg.SetSemanticVersion(\"0.1.2\") cfg.SetName(\"Tutorial 56\") cfg.Serve(vuejs.Dist()) // we have multiple frontend openapi distributions provided, e.g. swagger, redocly or stoplight. // Note, that ALL frontends are broken in one or another way. E.g. swagger does not support even simplest // recursions and stoplight does not support multipart files. cfg.Serve(stoplight.Dist()) //cfg.Serve(swagger.Dist()) //cfg.Serve(redocly.Dist()) cfg.SetDecorator(cfg.NewScaffold(). Decorator()) option.MustZero(cfg.StandardSystems()) std.Must(std.Must(cfg.UserManagement()).UseCases.EnableBootstrapAdmin(time.Now().Add(time.Hour), \"%6UbRsCuM8N$auy\")) api := std.Must(cfghapi.Enable(cfg)).API tokens := std.Must(cfg.TokenManagement()) configureMyAPI(api, tokens) cfg.RootViewWithDecoration(\".\", func(wnd core.Window) core.View { return VStack(Text(\"hello world\")). Frame(Frame{}.MatchScreen()) }) }). Run() } func configureMyAPI(api *hapi.API, tokens application.TokenManagement) { type StackElement struct { Line int File string } type Exception struct { Name string `json:\"name\"` Stack []StackElement `json:\"stack\"` Cause *Exception `json:\"cause\"` } type UploadMetadata struct { DeviceName string AppVersion string KeyValues map[string]string Exception *Exception } type UploadRequest struct { TestHeader string TestQuery string Metadata UploadMetadata Files []*multipart.FileHeader Subject auth.Subject } type SomeID string type NestedResponse struct { ID SomeID `json:\"id,omitempty\" example:\"1234\"` Url url.URL `json:\"url,omitempty\"` OtherNum int32 `json:\"other_num,omitempty\"` } type UploadResponse struct { ID string `json:\"id\"` Yes bool `json:\"yes\" doc:\"say no\" required:\"true\"` Num int `json:\"num\" supportingText:\"Irgendeine Nummer\"` When time.Time `json:\"when\"` Nested NestedResponse `json:\"nested\"` } hapi.Post[UploadRequest](api, hapi.Operation{Path: \"/api/v1/events\", Summary: \"Create a new event\", Description: \"A post will take the given meta data and files and persists it as an event. A unique tracking code is returned.\"}). Request( hapi.BearerAuth[UploadRequest](tokens.UseCases.AuthenticateSubject, func(dst *UploadRequest, subject auth.Subject) error { dst.Subject = subject return nil }), hapi.StrFromHeader(hapi.StrParam[UploadRequest]{Name: \"test-header\", IntoModel: func(dst *UploadRequest, value string) error { dst.TestHeader = value return nil }}), hapi.StrFromQuery(hapi.StrParam[UploadRequest]{Name: \"test-query\", IntoModel: func(dst *UploadRequest, value string) error { dst.TestQuery = value return nil }}), // this can be a simple alternative /*hapi.JSONFromBody(func(dst *UploadRequest, model UploadMetadata) error { dst.Metadata = model return nil }),*/ hapi.JSONFromFormField(\"meta\", func(dst *UploadRequest, model UploadMetadata) error { dst.Metadata = model return nil }), hapi.FilesFromFormField(\"files\", func(dst *UploadRequest, files []*multipart.FileHeader) error { dst.Files = files return nil }), ). Response( hapi.ToJSON[UploadRequest, UploadResponse](func(in UploadRequest) (UploadResponse, error) { fmt.Printf(\"%+v\\n\", in) return UploadResponse{ID: \"1234-\" + in.TestHeader, When: time.Now()}, nil }), /*hapi.ToBinary[UploadRequest](func(in UploadRequest) (io.Reader, error) { return bytes.NewReader([]byte(in.TestHeader)), nil }),*/ ) } ","image#Image":" ","info#Info":"More static content."},"title":"Tutorial 56"},"/docs/examples/tutorial-57-adm-stores/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"github.com/worldiety/option\" \"go.wdy.de/nago/application\" cfgrepoview \"go.wdy.de/nago/application/inspector/cfg\" \"go.wdy.de/nago/pkg/data\" \"go.wdy.de/nago/pkg/std\" \"go.wdy.de/nago/presentation/core\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" \"math/rand\" \"time\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial_57\") cfg.Serve(vuejs.Dist()) cfg.SetDecorator(cfg.NewScaffold(). Decorator()) option.MustZero(cfg.StandardSystems()) std.Must(std.Must(cfg.UserManagement()).UseCases.EnableBootstrapAdmin(time.Now().Add(time.Hour), \"%6UbRsCuM8N$auy\")) option.Must(cfgrepoview.Enable(cfg)) fillRepoStuff(cfg) cfg.RootViewWithDecoration(\".\", func(wnd core.Window) core.View { return ui.VStack(ui.Text(\"hello world\")). Frame(ui.Frame{}.MatchScreen()) }) }). Run() } type Person struct { ID string `json:\"id,omitempty\"` Firstname string `json:\"firstname,omitempty\"` Lastname string `json:\"lastname,omitempty\"` Age int `json:\"age,omitempty\"` Hobbies []string `json:\"hobbies,omitempty\"` } func (p Person) Identity() string { return p.ID } var firstnames = []string{\"Max\", \"Anna\", \"Peter\", \"Julia\", \"Lukas\", \"Laura\", \"Felix\", \"Sophie\", \"Tobias\", \"Marie\"} var lastnames = []string{\"Müller\", \"Schmidt\", \"Schneider\", \"Fischer\", \"Weber\", \"Meyer\", \"Wagner\", \"Becker\", \"Hoffmann\", \"Schäfer\"} var hobbies = []string{\"Lesen\", \"Schwimmen\", \"Radfahren\", \"Kochen\", \"Wandern\", \"Fotografie\", \"Gärtnern\", \"Reisen\", \"Musik\", \"Zeichnen\"} func generatePersons(n int) []Person { persons := make([]Person, n) for i := 0; i \u003c n; i++ { persons[i] = Person{ ID: data.RandIdent[string](), Firstname: firstnames[rand.Intn(len(firstnames))], Lastname: lastnames[rand.Intn(len(lastnames))], Age: rand.Intn(50) + 18, // Alter zwischen 18 und 67 Hobbies: randomHobbies(), } } return persons } func randomHobbies() []string { num := rand.Intn(3) + 1 // 1 bis 3 Hobbies hobbySet := make(map[string]struct{}) var selected []string for len(selected) \u003c num { hobby := hobbies[rand.Intn(len(hobbies))] if _, exists := hobbySet[hobby]; !exists { hobbySet[hobby] = struct{}{} selected = append(selected, hobby) } } return selected } func fillRepoStuff(cfg *application.Configurator) { addressbook := application.SloppyRepository[Person, string](cfg) if option.Must(addressbook.Count()) \u003c 102 { for _, person := range generatePersons(102) { option.MustZero(addressbook.Save(person)) } } } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 57"},"/docs/examples/tutorial-58-richtext/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"github.com/worldiety/option\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/pkg/std\" \"go.wdy.de/nago/presentation/core\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" \"time\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial_58\") cfg.Serve(vuejs.Dist()) cfg.SetDecorator(cfg.NewScaffold(). Decorator()) option.MustZero(cfg.StandardSystems()) std.Must(std.Must(cfg.UserManagement()).UseCases.EnableBootstrapAdmin(time.Now().Add(time.Hour), \"%6UbRsCuM8N$auy\")) cfg.RootViewWithDecoration(\".\", func(wnd core.Window) core.View { text := core.AutoState[string](wnd).Init(func() string { return \"hello rich text world!\" }).Observe(func(newValue string) { fmt.Println(\"received:\", newValue) }) return ui.VStack( ui.RichTextEditor(text.Get()).InputValue(text).Frame(ui.Frame{Width: ui.L560}), ui.PrimaryButton(func() { text.Set(text.Get() + \"\u003cbr\u003eblub\") }).Title(\"add blub\"), ui.HLine(), ui.Text(\"only rich text view\"), ui.RichText(text.Get()), ). Frame(ui.Frame{}.MatchScreen()) }) }). Run() } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 58"},"/docs/examples/tutorial-59-cms/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"fmt\" \"github.com/worldiety/option\" \"go.wdy.de/nago/application\" cfgcms \"go.wdy.de/nago/application/cms/cfg\" cfginspector \"go.wdy.de/nago/application/inspector/cfg\" \"go.wdy.de/nago/pkg/std\" \"go.wdy.de/nago/presentation/core\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" \"time\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial_58\") cfg.Serve(vuejs.Dist()) cfg.SetDecorator(cfg.NewScaffold(). Decorator()) option.MustZero(cfg.StandardSystems()) std.Must(std.Must(cfg.UserManagement()).UseCases.EnableBootstrapAdmin(time.Now().Add(time.Hour), \"%6UbRsCuM8N$auy\")) std.Must(cfginspector.Enable(cfg)) std.Must(cfgcms.Enable(cfg)) //cfg.EntityStore(\"nago.cms.document\") cfg.RootViewWithDecoration(\".\", func(wnd core.Window) core.View { text := core.AutoState[string](wnd).Init(func() string { return \"hello rich text world!\" }).Observe(func(newValue string) { fmt.Println(\"received:\", newValue) }) return ui.VStack( ui.RichTextEditor(text.Get()).InputValue(text).Frame(ui.Frame{Width: ui.L560}), ui.PrimaryButton(func() { text.Set(text.Get() + \"\u003cbr\u003eblub\") }).Title(\"add blub\"), ui.HLine(), ui.Text(\"only rich text view\"), ui.RichText(text.Get()), ). Frame(ui.Frame{}.MatchScreen()) }) }). Run() } ","image#Image":" ","info#Info":"More static content."},"title":"Tutorial 59"},"/docs/examples/tutorial-60-customfont/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( _ \"embed\" \"github.com/worldiety/option\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/application/settings\" \"go.wdy.de/nago/application/theme\" \"go.wdy.de/nago/pkg/std\" \"go.wdy.de/nago/presentation/core\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" \"time\" ) //go:embed font/GloriaHallelujah-Regular.ttf var fntGloria application.StaticBytes //go:embed font/Silkscreen-Regular.ttf var fntSilkscreenRegular application.StaticBytes //go:embed font/Silkscreen-Bold.ttf var fntSilkscreenBold application.StaticBytes func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial_60\") cfg.Serve(vuejs.Dist()) cfg.SetDecorator(cfg.NewScaffold(). Decorator()) uriGloria := cfg.Resource(fntGloria) uriSilkRegular := cfg.Resource(fntSilkscreenRegular) uriSilkBold := cfg.Resource(fntSilkscreenBold) cfgTheme := settings.ReadGlobal[theme.Settings](option.Must(cfg.SettingsManagement()).UseCases.LoadGlobal) cfgTheme.Fonts.DefaultFont = \"Gloria\" cfgTheme.Fonts.Faces = nil // clear whatever has been defined in the past cfgTheme.Fonts.Faces = append(cfgTheme.Fonts.Faces, core.FontFace{ Family: \"Gloria\", Source: uriGloria, }, core.FontFace{ Family: \"Silk\", Source: uriSilkRegular, }, core.FontFace{ Family: \"Silk\", Source: uriSilkBold, Weight: \"bold\", }, ) settings.WriteGlobal(option.Must(cfg.SettingsManagement()).UseCases.StoreGlobal, cfgTheme) std.Must(std.Must(cfg.UserManagement()).UseCases.EnableBootstrapAdmin(time.Now().Add(time.Hour), \"%6UbRsCuM8N$auy\")) cfg.RootViewWithDecoration(\".\", func(wnd core.Window) core.View { return ui.VStack( ui.Text(\"new default text\"), ui.Text(\"new default title text\").Font(ui.Title), ui.Text(\"custom 2 regular\").Font(ui.Font{Name: \"Silk\"}), ui.Text(\"custom 2 bold\").Font(ui.Font{Name: \"Silk\", Weight: ui.BoldFontWeight}), ). Frame(ui.Frame{}.MatchScreen()) }) }). Run() } ","image#Image":"","info#Info":"More static content."},"title":"Tutorial 60"},"/docs/examples/tutorial-61-scheduler/":{"data":{"":"Write some static content.","example#Example":" // Copyright (c) 2025 worldiety GmbH // // This file is part of the NAGO Low-Code Platform. // Licensed under the terms specified in the LICENSE file. // // SPDX-License-Identifier: Custom-License package main import ( \"context\" \"github.com/worldiety/option\" \"go.wdy.de/nago/application\" \"go.wdy.de/nago/application/scheduler\" cfgscheduler \"go.wdy.de/nago/application/scheduler/cfg\" \"go.wdy.de/nago/application/user\" \"go.wdy.de/nago/logging\" \"go.wdy.de/nago/pkg/std\" \"go.wdy.de/nago/presentation/core\" \"go.wdy.de/nago/presentation/ui\" \"go.wdy.de/nago/web/vuejs\" \"time\" ) func main() { application.Configure(func(cfg *application.Configurator) { cfg.SetApplicationID(\"de.worldiety.tutorial_60\") cfg.Serve(vuejs.Dist()) cfg.SetDecorator(cfg.NewScaffold(). Decorator()) option.MustZero(cfg.StandardSystems()) std.Must(std.Must(cfg.UserManagement()).UseCases.EnableBootstrapAdmin(time.Now().Add(time.Hour), \"%6UbRsCuM8N$auy\")) schedulers := option.Must(cfgscheduler.Enable(cfg)) option.MustZero(schedulers.UseCases.Configure(user.SU(), scheduler.Options{ Name: \"test.cron\", Description: \"cron job test\", Kind: scheduler.Cron, Defaults: scheduler.Settings{ CronHour: 10, CronMinute: 40, }, Runner: func(ctx context.Context) error { logging.FromContext(ctx).Info(\"Running cron\") logging.FromContext(ctx).Info(\"some values\", \"key\", \"value\") return nil }, Actions: nil, })) cfg.RootViewWithDecoration(\".\", func(wnd core.Window) core.View { return ui.VStack( ui.Text(\"scheduler demo, go to admin menu\"), ). Frame(ui.Frame{}.MatchScreen()) }) }). Run() } ","info#Info":"More static content."},"title":"Tutorial 61"},"/docs/getting-started/":{"data":{"":"What is the idea of Nago? Something about the history of Nago. Why was Nago invented? And how it improved. Is Nago the best low code framework right now? - Yes, it is!\nTBD"},"title":"Getting Started"},"/docs/getting-started/quickstart/":{"data":{"":"Here are some quickstart instructions.\nTBD"},"title":"Quickstart"},"/docs/ora/":{"data":{"":"Some interesting stuff about the ORA.\nTBD"},"title":"Ora"},"/showcase/":{"data":{"":" WebApps build with Nago Supportiety Hako Eventplaner 2025 HZO Hörwerk Community Plattform "},"title":"Showcase"},"/testimonials/":{"data":{"":"This is where people can share their experience and expectations of Nago. Does Nago have any weeknesses? Anything that needs to be discussed or shared with the Nago community will be displayed here.\nYou are welcome to send us your contribution and we will try to include it. info@worldiety.de\nTBD"},"title":"Testimonials"},"/testimonials/01/":{"data":{"":"","introdcution#Introdcution":"Some interesting stuff here.","summary#Summary":"An interesting summary.\nTBD"},"title":"Low-Code - High Impact"},"/testimonials/02/":{"data":{"":"Some interesting stuff here.\nTBD"},"title":"Low-Code in Action"}}